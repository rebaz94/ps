// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsNameRegionsReader is a Reader for the GetOrganizationsNameRegions structure.
type GetOrganizationsNameRegionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsNameRegionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsNameRegionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsNameRegionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsNameRegionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsNameRegionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsNameRegionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{name}/regions] get_organizations_name_regions", response, response.Code())
	}
}

// NewGetOrganizationsNameRegionsOK creates a GetOrganizationsNameRegionsOK with default headers values
func NewGetOrganizationsNameRegionsOK() *GetOrganizationsNameRegionsOK {
	return &GetOrganizationsNameRegionsOK{}
}

/*
GetOrganizationsNameRegionsOK describes a response with status code 200, with default header values.

Returns the organization's regions
*/
type GetOrganizationsNameRegionsOK struct {
	Payload *GetOrganizationsNameRegionsOKBody
}

// IsSuccess returns true when this get organizations name regions o k response has a 2xx status code
func (o *GetOrganizationsNameRegionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations name regions o k response has a 3xx status code
func (o *GetOrganizationsNameRegionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name regions o k response has a 4xx status code
func (o *GetOrganizationsNameRegionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations name regions o k response has a 5xx status code
func (o *GetOrganizationsNameRegionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name regions o k response a status code equal to that given
func (o *GetOrganizationsNameRegionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations name regions o k response
func (o *GetOrganizationsNameRegionsOK) Code() int {
	return 200
}

func (o *GetOrganizationsNameRegionsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsNameRegionsOK) String() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsNameRegionsOK) GetPayload() *GetOrganizationsNameRegionsOKBody {
	return o.Payload
}

func (o *GetOrganizationsNameRegionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsNameRegionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsNameRegionsUnauthorized creates a GetOrganizationsNameRegionsUnauthorized with default headers values
func NewGetOrganizationsNameRegionsUnauthorized() *GetOrganizationsNameRegionsUnauthorized {
	return &GetOrganizationsNameRegionsUnauthorized{}
}

/*
GetOrganizationsNameRegionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsNameRegionsUnauthorized struct {
}

// IsSuccess returns true when this get organizations name regions unauthorized response has a 2xx status code
func (o *GetOrganizationsNameRegionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name regions unauthorized response has a 3xx status code
func (o *GetOrganizationsNameRegionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name regions unauthorized response has a 4xx status code
func (o *GetOrganizationsNameRegionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name regions unauthorized response has a 5xx status code
func (o *GetOrganizationsNameRegionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name regions unauthorized response a status code equal to that given
func (o *GetOrganizationsNameRegionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations name regions unauthorized response
func (o *GetOrganizationsNameRegionsUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsNameRegionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsUnauthorized ", 401)
}

func (o *GetOrganizationsNameRegionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsUnauthorized ", 401)
}

func (o *GetOrganizationsNameRegionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameRegionsForbidden creates a GetOrganizationsNameRegionsForbidden with default headers values
func NewGetOrganizationsNameRegionsForbidden() *GetOrganizationsNameRegionsForbidden {
	return &GetOrganizationsNameRegionsForbidden{}
}

/*
GetOrganizationsNameRegionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsNameRegionsForbidden struct {
}

// IsSuccess returns true when this get organizations name regions forbidden response has a 2xx status code
func (o *GetOrganizationsNameRegionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name regions forbidden response has a 3xx status code
func (o *GetOrganizationsNameRegionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name regions forbidden response has a 4xx status code
func (o *GetOrganizationsNameRegionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name regions forbidden response has a 5xx status code
func (o *GetOrganizationsNameRegionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name regions forbidden response a status code equal to that given
func (o *GetOrganizationsNameRegionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations name regions forbidden response
func (o *GetOrganizationsNameRegionsForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsNameRegionsForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsForbidden ", 403)
}

func (o *GetOrganizationsNameRegionsForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsForbidden ", 403)
}

func (o *GetOrganizationsNameRegionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameRegionsNotFound creates a GetOrganizationsNameRegionsNotFound with default headers values
func NewGetOrganizationsNameRegionsNotFound() *GetOrganizationsNameRegionsNotFound {
	return &GetOrganizationsNameRegionsNotFound{}
}

/*
GetOrganizationsNameRegionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsNameRegionsNotFound struct {
}

// IsSuccess returns true when this get organizations name regions not found response has a 2xx status code
func (o *GetOrganizationsNameRegionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name regions not found response has a 3xx status code
func (o *GetOrganizationsNameRegionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name regions not found response has a 4xx status code
func (o *GetOrganizationsNameRegionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name regions not found response has a 5xx status code
func (o *GetOrganizationsNameRegionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name regions not found response a status code equal to that given
func (o *GetOrganizationsNameRegionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations name regions not found response
func (o *GetOrganizationsNameRegionsNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsNameRegionsNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsNotFound ", 404)
}

func (o *GetOrganizationsNameRegionsNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsNotFound ", 404)
}

func (o *GetOrganizationsNameRegionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameRegionsInternalServerError creates a GetOrganizationsNameRegionsInternalServerError with default headers values
func NewGetOrganizationsNameRegionsInternalServerError() *GetOrganizationsNameRegionsInternalServerError {
	return &GetOrganizationsNameRegionsInternalServerError{}
}

/*
GetOrganizationsNameRegionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsNameRegionsInternalServerError struct {
}

// IsSuccess returns true when this get organizations name regions internal server error response has a 2xx status code
func (o *GetOrganizationsNameRegionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name regions internal server error response has a 3xx status code
func (o *GetOrganizationsNameRegionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name regions internal server error response has a 4xx status code
func (o *GetOrganizationsNameRegionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations name regions internal server error response has a 5xx status code
func (o *GetOrganizationsNameRegionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations name regions internal server error response a status code equal to that given
func (o *GetOrganizationsNameRegionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations name regions internal server error response
func (o *GetOrganizationsNameRegionsInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsNameRegionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsInternalServerError ", 500)
}

func (o *GetOrganizationsNameRegionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{name}/regions][%d] getOrganizationsNameRegionsInternalServerError ", 500)
}

func (o *GetOrganizationsNameRegionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsNameRegionsOKBody get organizations name regions o k body
swagger:model GetOrganizationsNameRegionsOKBody
*/
type GetOrganizationsNameRegionsOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsNameRegionsOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations name regions o k body
func (o *GetOrganizationsNameRegionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsNameRegionsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameRegionsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsNameRegionsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsNameRegionsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations name regions o k body based on the context it is used
func (o *GetOrganizationsNameRegionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsNameRegionsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsNameRegionsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsNameRegionsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsNameRegionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsNameRegionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsNameRegionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsNameRegionsOKBodyDataItems0 get organizations name regions o k body data items0
swagger:model GetOrganizationsNameRegionsOKBodyDataItems0
*/
type GetOrganizationsNameRegionsOKBodyDataItems0 struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this get organizations name regions o k body data items0
func (o *GetOrganizationsNameRegionsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameRegionsOKBodyDataItems0) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations name regions o k body data items0 based on context it is used
func (o *GetOrganizationsNameRegionsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsNameRegionsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsNameRegionsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsNameRegionsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
