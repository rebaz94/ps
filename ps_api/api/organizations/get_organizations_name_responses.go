// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsNameReader is a Reader for the GetOrganizationsName structure.
type GetOrganizationsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{name}] get_organizations_name", response, response.Code())
	}
}

// NewGetOrganizationsNameOK creates a GetOrganizationsNameOK with default headers values
func NewGetOrganizationsNameOK() *GetOrganizationsNameOK {
	return &GetOrganizationsNameOK{}
}

/*
GetOrganizationsNameOK describes a response with status code 200, with default header values.

Returns an organization
*/
type GetOrganizationsNameOK struct {
	Payload *GetOrganizationsNameOKBody
}

// IsSuccess returns true when this get organizations name o k response has a 2xx status code
func (o *GetOrganizationsNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations name o k response has a 3xx status code
func (o *GetOrganizationsNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name o k response has a 4xx status code
func (o *GetOrganizationsNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations name o k response has a 5xx status code
func (o *GetOrganizationsNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name o k response a status code equal to that given
func (o *GetOrganizationsNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations name o k response
func (o *GetOrganizationsNameOK) Code() int {
	return 200
}

func (o *GetOrganizationsNameOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsNameOK) String() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsNameOK) GetPayload() *GetOrganizationsNameOKBody {
	return o.Payload
}

func (o *GetOrganizationsNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsNameUnauthorized creates a GetOrganizationsNameUnauthorized with default headers values
func NewGetOrganizationsNameUnauthorized() *GetOrganizationsNameUnauthorized {
	return &GetOrganizationsNameUnauthorized{}
}

/*
GetOrganizationsNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsNameUnauthorized struct {
}

// IsSuccess returns true when this get organizations name unauthorized response has a 2xx status code
func (o *GetOrganizationsNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name unauthorized response has a 3xx status code
func (o *GetOrganizationsNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name unauthorized response has a 4xx status code
func (o *GetOrganizationsNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name unauthorized response has a 5xx status code
func (o *GetOrganizationsNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name unauthorized response a status code equal to that given
func (o *GetOrganizationsNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations name unauthorized response
func (o *GetOrganizationsNameUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameUnauthorized ", 401)
}

func (o *GetOrganizationsNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameUnauthorized ", 401)
}

func (o *GetOrganizationsNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameForbidden creates a GetOrganizationsNameForbidden with default headers values
func NewGetOrganizationsNameForbidden() *GetOrganizationsNameForbidden {
	return &GetOrganizationsNameForbidden{}
}

/*
GetOrganizationsNameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsNameForbidden struct {
}

// IsSuccess returns true when this get organizations name forbidden response has a 2xx status code
func (o *GetOrganizationsNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name forbidden response has a 3xx status code
func (o *GetOrganizationsNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name forbidden response has a 4xx status code
func (o *GetOrganizationsNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name forbidden response has a 5xx status code
func (o *GetOrganizationsNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name forbidden response a status code equal to that given
func (o *GetOrganizationsNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations name forbidden response
func (o *GetOrganizationsNameForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsNameForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameForbidden ", 403)
}

func (o *GetOrganizationsNameForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameForbidden ", 403)
}

func (o *GetOrganizationsNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameNotFound creates a GetOrganizationsNameNotFound with default headers values
func NewGetOrganizationsNameNotFound() *GetOrganizationsNameNotFound {
	return &GetOrganizationsNameNotFound{}
}

/*
GetOrganizationsNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsNameNotFound struct {
}

// IsSuccess returns true when this get organizations name not found response has a 2xx status code
func (o *GetOrganizationsNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name not found response has a 3xx status code
func (o *GetOrganizationsNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name not found response has a 4xx status code
func (o *GetOrganizationsNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations name not found response has a 5xx status code
func (o *GetOrganizationsNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations name not found response a status code equal to that given
func (o *GetOrganizationsNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations name not found response
func (o *GetOrganizationsNameNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsNameNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameNotFound ", 404)
}

func (o *GetOrganizationsNameNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameNotFound ", 404)
}

func (o *GetOrganizationsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsNameInternalServerError creates a GetOrganizationsNameInternalServerError with default headers values
func NewGetOrganizationsNameInternalServerError() *GetOrganizationsNameInternalServerError {
	return &GetOrganizationsNameInternalServerError{}
}

/*
GetOrganizationsNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsNameInternalServerError struct {
}

// IsSuccess returns true when this get organizations name internal server error response has a 2xx status code
func (o *GetOrganizationsNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations name internal server error response has a 3xx status code
func (o *GetOrganizationsNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations name internal server error response has a 4xx status code
func (o *GetOrganizationsNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations name internal server error response has a 5xx status code
func (o *GetOrganizationsNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations name internal server error response a status code equal to that given
func (o *GetOrganizationsNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations name internal server error response
func (o *GetOrganizationsNameInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameInternalServerError ", 500)
}

func (o *GetOrganizationsNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{name}][%d] getOrganizationsNameInternalServerError ", 500)
}

func (o *GetOrganizationsNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsNameOKBody get organizations name o k body
swagger:model GetOrganizationsNameOKBody
*/
type GetOrganizationsNameOKBody struct {

	// The billing email of the organization
	BillingEmail string `json:"billing_email,omitempty"`

	// When the organization was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The number of databases in the organization
	// Required: true
	DatabaseCount *float64 `json:"database_count"`

	// features
	Features *GetOrganizationsNameOKBodyFeatures `json:"features,omitempty"`

	// flags
	Flags *GetOrganizationsNameOKBodyFlags `json:"flags,omitempty"`

	// Whether or not the organization has past due billing invoices
	// Required: true
	HasPastDueInvoices *bool `json:"has_past_due_invoices"`

	// The ID for the organization
	// Required: true
	ID *string `json:"id"`

	// Whether or not the IdP provider is be responsible for managing roles in PlanetScale
	// Required: true
	IdpManagedRoles *bool `json:"idp_managed_roles"`

	// The expected monthly budget for the organization
	// Required: true
	InvoiceBudgetAmount *float64 `json:"invoice_budget_amount"`

	// The name of the organization
	// Required: true
	Name *string `json:"name"`

	// The billing plan of the organization
	// Required: true
	Plan *string `json:"plan"`

	// Whether or not the organization has single tenancy enabled
	// Required: true
	SingleTenancy *bool `json:"single_tenancy"`

	// The number of sleeping databases in the organization
	// Required: true
	SleepingDatabaseCount *float64 `json:"sleeping_database_count"`

	// Whether or not SSO is enabled on the organization
	// Required: true
	Sso *bool `json:"sso"`

	// Whether or not the organization uses a WorkOS directory
	// Required: true
	SsoDirectory *bool `json:"sso_directory"`

	// The URL of the organization's SSO portal
	SsoPortalURL string `json:"sso_portal_url,omitempty"`

	// When the organization was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// Whether or not the organization's billing information is valid
	// Required: true
	ValidBillingInfo *bool `json:"valid_billing_info"`
}

// Validate validates this get organizations name o k body
func (o *GetOrganizationsNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabaseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHasPastDueInvoices(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdpManagedRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoiceBudgetAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSingleTenancy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSleepingDatabaseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSso(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSsoDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValidBillingInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsNameOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateDatabaseCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"database_count", "body", o.DatabaseCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(o.Features) { // not required
		return nil
	}

	if o.Features != nil {
		if err := o.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsNameOK" + "." + "features")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsNameOK" + "." + "features")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(o.Flags) { // not required
		return nil
	}

	if o.Flags != nil {
		if err := o.Flags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsNameOK" + "." + "flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsNameOK" + "." + "flags")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateHasPastDueInvoices(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"has_past_due_invoices", "body", o.HasPastDueInvoices); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateIdpManagedRoles(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"idp_managed_roles", "body", o.IdpManagedRoles); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateInvoiceBudgetAmount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"invoice_budget_amount", "body", o.InvoiceBudgetAmount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateSingleTenancy(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"single_tenancy", "body", o.SingleTenancy); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateSleepingDatabaseCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"sleeping_database_count", "body", o.SleepingDatabaseCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateSso(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"sso", "body", o.Sso); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateSsoDirectory(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"sso_directory", "body", o.SsoDirectory); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) validateValidBillingInfo(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsNameOK"+"."+"valid_billing_info", "body", o.ValidBillingInfo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations name o k body based on the context it is used
func (o *GetOrganizationsNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsNameOKBody) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	if o.Features != nil {

		if swag.IsZero(o.Features) { // not required
			return nil
		}

		if err := o.Features.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsNameOK" + "." + "features")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsNameOK" + "." + "features")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsNameOKBody) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	if o.Flags != nil {

		if swag.IsZero(o.Flags) { // not required
			return nil
		}

		if err := o.Flags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsNameOK" + "." + "flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsNameOK" + "." + "flags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsNameOKBodyFeatures get organizations name o k body features
swagger:model GetOrganizationsNameOKBodyFeatures
*/
type GetOrganizationsNameOKBodyFeatures struct {

	// insights
	Insights bool `json:"insights,omitempty"`

	// single tenancy
	SingleTenancy bool `json:"single_tenancy,omitempty"`

	// sso
	Sso bool `json:"sso,omitempty"`
}

// Validate validates this get organizations name o k body features
func (o *GetOrganizationsNameOKBodyFeatures) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organizations name o k body features based on context it is used
func (o *GetOrganizationsNameOKBodyFeatures) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsNameOKBodyFeatures) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsNameOKBodyFeatures) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsNameOKBodyFeatures
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsNameOKBodyFlags get organizations name o k body flags
swagger:model GetOrganizationsNameOKBodyFlags
*/
type GetOrganizationsNameOKBodyFlags struct {

	// example flag
	// Enum: [full on]
	ExampleFlag string `json:"example_flag,omitempty"`
}

// Validate validates this get organizations name o k body flags
func (o *GetOrganizationsNameOKBodyFlags) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExampleFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationsNameOKBodyFlagsTypeExampleFlagPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","on"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsNameOKBodyFlagsTypeExampleFlagPropEnum = append(getOrganizationsNameOKBodyFlagsTypeExampleFlagPropEnum, v)
	}
}

const (

	// GetOrganizationsNameOKBodyFlagsExampleFlagFull captures enum value "full"
	GetOrganizationsNameOKBodyFlagsExampleFlagFull string = "full"

	// GetOrganizationsNameOKBodyFlagsExampleFlagOn captures enum value "on"
	GetOrganizationsNameOKBodyFlagsExampleFlagOn string = "on"
)

// prop value enum
func (o *GetOrganizationsNameOKBodyFlags) validateExampleFlagEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsNameOKBodyFlagsTypeExampleFlagPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsNameOKBodyFlags) validateExampleFlag(formats strfmt.Registry) error {
	if swag.IsZero(o.ExampleFlag) { // not required
		return nil
	}

	// value enum
	if err := o.validateExampleFlagEnum("getOrganizationsNameOK"+"."+"flags"+"."+"example_flag", "body", o.ExampleFlag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations name o k body flags based on context it is used
func (o *GetOrganizationsNameOKBodyFlags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsNameOKBodyFlags) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsNameOKBodyFlags) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsNameOKBodyFlags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
