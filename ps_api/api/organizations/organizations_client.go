// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOK, error)

	GetOrganizationsName(params *GetOrganizationsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsNameOK, error)

	GetOrganizationsNameRegions(params *GetOrganizationsNameRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsNameRegionsOK, error)

	PatchOrganizationsName(params *PatchOrganizationsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchOrganizationsNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetOrganizations lists organizations

	When using a service token, returns the list of organizations the service token has access to. When using an OAuth token, returns the list of organizations the user has access to.

### Authorization
A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| User | `read_organizations` |
*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations",
		Method:             "GET",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsName gets an organization

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_organization`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| User | `read_organizations` |
| Organization | `read_organization` |
*/
func (a *Client) GetOrganizationsName(params *GetOrganizationsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_name",
		Method:             "GET",
		PathPattern:        "/organizations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsNameRegions lists regions for an organization

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_organization`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| User | `read_organizations` |
| Organization | `read_organization` |
*/
func (a *Client) GetOrganizationsNameRegions(params *GetOrganizationsNameRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsNameRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsNameRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_name_regions",
		Method:             "GET",
		PathPattern:        "/organizations/{name}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsNameRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsNameRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_name_regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchOrganizationsName updates an organization

### Authorization
A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `write_organization` |
*/
func (a *Client) PatchOrganizationsName(params *PatchOrganizationsNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchOrganizationsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationsNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch_organizations_name",
		Method:             "PATCH",
		PathPattern:        "/organizations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOrganizationsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_organizations_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
