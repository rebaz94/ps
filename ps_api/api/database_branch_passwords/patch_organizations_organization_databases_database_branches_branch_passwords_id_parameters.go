// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams creates a new PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithTimeout creates a new PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams object
// with the ability to set a timeout on a request.
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithTimeout(timeout time.Duration) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams{
		timeout: timeout,
	}
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithContext creates a new PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams object
// with the ability to set a context for a request.
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithContext(ctx context.Context) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams{
		Context: ctx,
	}
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithHTTPClient creates a new PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParamsWithHTTPClient(client *http.Client) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams{
		HTTPClient: client,
	}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams contains all the parameters to send to the API endpoint

	for the patch organizations organization databases database branches branch passwords id operation.

	Typically these are written to a http.Request.
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams struct {

	// Body.
	Body PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody

	/* Branch.

	   The name of the branch the password belongs to
	*/
	Branch string

	/* Database.

	   The name of the database the password belongs to
	*/
	Database string

	/* ID.

	   The ID of the password
	*/
	ID string

	/* Organization.

	   The name of the organization the password belongs to
	*/
	Organization string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch organizations organization databases database branches branch passwords id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithDefaults() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch organizations organization databases database branches branch passwords id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithTimeout(timeout time.Duration) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithContext(ctx context.Context) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithHTTPClient(client *http.Client) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithBody(body PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetBody(body PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) {
	o.Body = body
}

// WithBranch adds the branch to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithBranch(branch string) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithDatabase adds the database to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithDatabase(database string) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetDatabase(database)
	return o
}

// SetDatabase adds the database to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetDatabase(database string) {
	o.Database = database
}

// WithID adds the id to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithID(id string) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetID(id string) {
	o.ID = id
}

// WithOrganization adds the organization to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WithOrganization(organization string) *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the patch organizations organization databases database branches branch passwords id params
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WriteToRequest writes these params to a swagger request
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	// path param database
	if err := r.SetPathParam("database", o.Database); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
