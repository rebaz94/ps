// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams creates a new GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithTimeout creates a new GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithTimeout(timeout time.Duration) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams{
		timeout: timeout,
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithContext creates a new GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams object
// with the ability to set a context for a request.
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithContext(ctx context.Context) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams{
		Context: ctx,
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithHTTPClient creates a new GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParamsWithHTTPClient(client *http.Client) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams contains all the parameters to send to the API endpoint

	for the get organizations organization databases database branches branch passwords operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams struct {

	/* Branch.

	   The name of the branch the password belongs to
	*/
	Branch string

	/* Database.

	   The name of the database the password belongs to
	*/
	Database string

	/* Organization.

	   The name of the organization the password belongs to
	*/
	Organization string

	/* Page.

	   If provided, specifies the page offset of returned results

	   Default: 1
	*/
	Page *float64

	/* PerPage.

	   If provided, specifies the number of returned results

	   Default: 25
	*/
	PerPage *float64

	/* ReadOnlyRegionID.

	   A read-only region of the database branch. If present, the password results will be filtered to only those in the region
	*/
	ReadOnlyRegionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organizations organization databases database branches branch passwords params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithDefaults() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organizations organization databases database branches branch passwords params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetDefaults() {
	var (
		pageDefault = float64(1)

		perPageDefault = float64(25)
	)

	val := GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithTimeout(timeout time.Duration) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithContext(ctx context.Context) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithHTTPClient(client *http.Client) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithBranch(branch string) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithDatabase adds the database to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithDatabase(database string) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetDatabase(database)
	return o
}

// SetDatabase adds the database to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetDatabase(database string) {
	o.Database = database
}

// WithOrganization adds the organization to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithOrganization(organization string) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPage adds the page to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithPage(page *float64) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetPage(page *float64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithPerPage(perPage *float64) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetPerPage(perPage *float64) {
	o.PerPage = perPage
}

// WithReadOnlyRegionID adds the readOnlyRegionID to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WithReadOnlyRegionID(readOnlyRegionID *string) *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams {
	o.SetReadOnlyRegionID(readOnlyRegionID)
	return o
}

// SetReadOnlyRegionID adds the readOnlyRegionId to the get organizations organization databases database branches branch passwords params
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) SetReadOnlyRegionID(readOnlyRegionID *string) {
	o.ReadOnlyRegionID = readOnlyRegionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	// path param database
	if err := r.SetPathParam("database", o.Database); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage float64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatFloat64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage float64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatFloat64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.ReadOnlyRegionID != nil {

		// query param read_only_region_id
		var qrReadOnlyRegionID string

		if o.ReadOnlyRegionID != nil {
			qrReadOnlyRegionID = *o.ReadOnlyRegionID
		}
		qReadOnlyRegionID := qrReadOnlyRegionID
		if qReadOnlyRegionID != "" {

			if err := r.SetQueryParam("read_only_region_id", qReadOnlyRegionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
