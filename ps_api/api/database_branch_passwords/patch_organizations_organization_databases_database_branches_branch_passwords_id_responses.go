// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDReader is a Reader for the PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsID structure.
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}] patch_organizations_organization_databases_database_branches_branch_passwords_id", response, response.Code())
	}
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK creates a PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK with default headers values
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK{}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK describes a response with status code 200, with default header values.

Updates a password
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK struct {
	Payload *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody
}

// IsSuccess returns true when this patch organizations organization databases database branches branch passwords Id o k response has a 2xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch organizations organization databases database branches branch passwords Id o k response has a 3xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations organization databases database branches branch passwords Id o k response has a 4xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations organization databases database branches branch passwords Id o k response has a 5xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations organization databases database branches branch passwords Id o k response a status code equal to that given
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch organizations organization databases database branches branch passwords Id o k response
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) Code() int {
	return 200
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) Error() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK  %+v", 200, o.Payload)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) String() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK  %+v", 200, o.Payload)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) GetPayload() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody {
	return o.Payload
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized creates a PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized with default headers values
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized{}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized struct {
}

// IsSuccess returns true when this patch organizations organization databases database branches branch passwords Id unauthorized response has a 2xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations organization databases database branches branch passwords Id unauthorized response has a 3xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations organization databases database branches branch passwords Id unauthorized response has a 4xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations organization databases database branches branch passwords Id unauthorized response has a 5xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations organization databases database branches branch passwords Id unauthorized response a status code equal to that given
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch organizations organization databases database branches branch passwords Id unauthorized response
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) Code() int {
	return 401
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdUnauthorized ", 401)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdUnauthorized ", 401)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden creates a PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden with default headers values
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden{}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden struct {
}

// IsSuccess returns true when this patch organizations organization databases database branches branch passwords Id forbidden response has a 2xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations organization databases database branches branch passwords Id forbidden response has a 3xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations organization databases database branches branch passwords Id forbidden response has a 4xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations organization databases database branches branch passwords Id forbidden response has a 5xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations organization databases database branches branch passwords Id forbidden response a status code equal to that given
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch organizations organization databases database branches branch passwords Id forbidden response
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) Code() int {
	return 403
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdForbidden ", 403)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdForbidden ", 403)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound creates a PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound with default headers values
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound{}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound struct {
}

// IsSuccess returns true when this patch organizations organization databases database branches branch passwords Id not found response has a 2xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations organization databases database branches branch passwords Id not found response has a 3xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations organization databases database branches branch passwords Id not found response has a 4xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch organizations organization databases database branches branch passwords Id not found response has a 5xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch organizations organization databases database branches branch passwords Id not found response a status code equal to that given
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch organizations organization databases database branches branch passwords Id not found response
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) Code() int {
	return 404
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdNotFound ", 404)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdNotFound ", 404)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError creates a PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError with default headers values
func NewPatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError() *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError {
	return &PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError{}
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError struct {
}

// IsSuccess returns true when this patch organizations organization databases database branches branch passwords Id internal server error response has a 2xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch organizations organization databases database branches branch passwords Id internal server error response has a 3xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch organizations organization databases database branches branch passwords Id internal server error response has a 4xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch organizations organization databases database branches branch passwords Id internal server error response has a 5xx status code
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch organizations organization databases database branches branch passwords Id internal server error response a status code equal to that given
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch organizations organization databases database branches branch passwords Id internal server error response
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) Code() int {
	return 500
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdInternalServerError ", 500)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}][%d] patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdInternalServerError ", 500)
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody patch organizations organization databases database branches branch passwords ID body
swagger:model PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody struct {

	// The name for the password
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this patch organizations organization databases database branches branch passwords ID body
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch organizations organization databases database branches branch passwords ID body based on context it is used
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody patch organizations organization databases database branches branch passwords ID o k body
swagger:model PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// actor
	Actor *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor `json:"actor,omitempty"`

	// When the password was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database branch
	// Required: true
	DatabaseBranch *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch `json:"database_branch"`

	// When the password was deleted
	DeletedAt string `json:"deleted_at,omitempty"`

	// When the password will expire
	ExpiresAt string `json:"expires_at,omitempty"`

	// The ID for the password
	// Required: true
	ID *string `json:"id"`

	// The display name for the password
	// Required: true
	Name *string `json:"name"`

	// region
	Region *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion `json:"region,omitempty"`

	// Whether or not the password can be renewed
	// Required: true
	Renewable *bool `json:"renewable"`

	// Whether or not the password is for a read replica
	// Required: true
	Replica *bool `json:"replica"`

	// The role for the password
	// Required: true
	Role *string `json:"role"`

	// Time to live (in seconds) for the password. The password will be invalid when TTL has passed
	// Required: true
	TTLSeconds *float64 `json:"ttl_seconds"`

	// The username for the password
	Username string `json:"username,omitempty"`
}

// Validate validates this patch organizations organization databases database branches branch passwords ID o k body
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabaseBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRenewable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTLSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateDatabaseBranch(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch", "body", o.DatabaseBranch); err != nil {
		return err
	}

	if o.DatabaseBranch != nil {
		if err := o.DatabaseBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateRenewable(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"renewable", "body", o.Renewable); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateReplica(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"replica", "body", o.Replica); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) validateTTLSeconds(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"ttl_seconds", "body", o.TTLSeconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this patch organizations organization databases database branches branch passwords ID o k body based on the context it is used
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDatabaseBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) contextValidateDatabaseBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.DatabaseBranch != nil {

		if err := o.DatabaseBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor patch organizations organization databases database branches branch passwords ID o k body actor
swagger:model PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this patch organizations organization databases database branches branch passwords ID o k body actor
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch organizations organization databases database branches branch passwords ID o k body actor based on context it is used
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch patch organizations organization databases database branches branch passwords ID o k body database branch
swagger:model PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// The ID for the database branch
	// Required: true
	ID *string `json:"id"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name for the database branch
	// Required: true
	Name *string `json:"name"`

	// Whether or not the database branch is a production database branch
	// Required: true
	Production *bool `json:"production"`
}

// Validate validates this patch organizations organization databases database branches branch passwords ID o k body database branch
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch"+"."+"mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"database_branch"+"."+"production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch organizations organization databases database branches branch passwords ID o k body database branch based on context it is used
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyDatabaseBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion patch organizations organization databases database branches branch passwords ID o k body region
swagger:model PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion
*/
type PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this patch organizations organization databases database branches branch passwords ID o k body region
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("patchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdOK"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch organizations organization databases database branches branch passwords ID o k body region based on context it is used
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion) UnmarshalBinary(b []byte) error {
	var res PatchOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDOKBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
