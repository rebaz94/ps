// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewReader is a Reader for the PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenew structure.
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew] post_organizations_organization_databases_database_branches_branch_passwords_id_renew", response, response.Code())
	}
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK describes a response with status code 200, with default header values.

Updates a password
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK struct {
	Payload *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords Id renew o k response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords Id renew o k response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords Id renew o k response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords Id renew o k response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords Id renew o k response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post organizations organization databases database branches branch passwords Id renew o k response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) Code() int {
	return 200
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK  %+v", 200, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK  %+v", 200, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) GetPayload() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody {
	return o.Payload
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords Id renew unauthorized response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords Id renew unauthorized response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords Id renew unauthorized response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords Id renew unauthorized response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords Id renew unauthorized response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post organizations organization databases database branches branch passwords Id renew unauthorized response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) Code() int {
	return 401
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords Id renew forbidden response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords Id renew forbidden response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords Id renew forbidden response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords Id renew forbidden response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords Id renew forbidden response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post organizations organization databases database branches branch passwords Id renew forbidden response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) Code() int {
	return 403
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords Id renew not found response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords Id renew not found response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords Id renew not found response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords Id renew not found response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords Id renew not found response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post organizations organization databases database branches branch passwords Id renew not found response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) Code() int {
	return 404
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords Id renew internal server error response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords Id renew internal server error response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords Id renew internal server error response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords Id renew internal server error response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post organizations organization databases database branches branch passwords Id renew internal server error response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post organizations organization databases database branches branch passwords Id renew internal server error response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) Code() int {
	return 500
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody post organizations organization databases database branches branch passwords ID renew o k body
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// actor
	Actor *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor `json:"actor,omitempty"`

	// When the password was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database branch
	// Required: true
	DatabaseBranch *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch `json:"database_branch"`

	// When the password was deleted
	DeletedAt string `json:"deleted_at,omitempty"`

	// When the password will expire
	ExpiresAt string `json:"expires_at,omitempty"`

	// The ID for the password
	// Required: true
	ID *string `json:"id"`

	// The display name for the password
	// Required: true
	Name *string `json:"name"`

	// The plain text password
	// Required: true
	PlainText *string `json:"plain_text"`

	// region
	Region *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion `json:"region,omitempty"`

	// Whether or not the password can be renewed
	// Required: true
	Renewable *bool `json:"renewable"`

	// Whether or not the password is for a read replica
	// Required: true
	Replica *bool `json:"replica"`

	// The role for the password
	// Required: true
	Role *string `json:"role"`

	// Time to live (in seconds) for the password. The password will be invalid when TTL has passed
	// Required: true
	TTLSeconds *float64 `json:"ttl_seconds"`

	// The username for the password
	Username string `json:"username,omitempty"`
}

// Validate validates this post organizations organization databases database branches branch passwords ID renew o k body
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabaseBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlainText(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRenewable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTLSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateDatabaseBranch(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch", "body", o.DatabaseBranch); err != nil {
		return err
	}

	if o.DatabaseBranch != nil {
		if err := o.DatabaseBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validatePlainText(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"plain_text", "body", o.PlainText); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateRenewable(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"renewable", "body", o.Renewable); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateReplica(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"replica", "body", o.Replica); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) validateTTLSeconds(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"ttl_seconds", "body", o.TTLSeconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post organizations organization databases database branches branch passwords ID renew o k body based on the context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDatabaseBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) contextValidateDatabaseBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.DatabaseBranch != nil {

		if err := o.DatabaseBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor post organizations organization databases database branches branch passwords ID renew o k body actor
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this post organizations organization databases database branches branch passwords ID renew o k body actor
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords ID renew o k body actor based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch post organizations organization databases database branches branch passwords ID renew o k body database branch
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// The ID for the database branch
	// Required: true
	ID *string `json:"id"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name for the database branch
	// Required: true
	Name *string `json:"name"`

	// Whether or not the database branch is a production database branch
	// Required: true
	Production *bool `json:"production"`
}

// Validate validates this post organizations organization databases database branches branch passwords ID renew o k body database branch
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch"+"."+"mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"database_branch"+"."+"production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords ID renew o k body database branch based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyDatabaseBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion post organizations organization databases database branches branch passwords ID renew o k body region
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this post organizations organization databases database branches branch passwords ID renew o k body region
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIdRenewOK"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords ID renew o k body region based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsIDRenewOKBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
