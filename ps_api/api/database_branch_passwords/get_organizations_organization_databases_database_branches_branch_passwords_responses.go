// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader is a Reader for the GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswords structure.
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords] get_organizations_organization_databases_database_branches_branch_passwords", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK describes a response with status code 200, with default header values.

Gets the passwords for the database branch
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK struct {
	Payload *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody
}

// IsSuccess returns true when this get organizations organization databases database branches branch passwords o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases database branches branch passwords o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch passwords o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch passwords o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch passwords o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases database branches branch passwords o k response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) GetPayload() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch passwords unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch passwords unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch passwords unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch passwords unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch passwords unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases database branches branch passwords unauthorized response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch passwords forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch passwords forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch passwords forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch passwords forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch passwords forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases database branches branch passwords forbidden response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch passwords not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch passwords not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch passwords not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch passwords not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch passwords not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases database branches branch passwords not found response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch passwords internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch passwords internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch passwords internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch passwords internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases database branches branch passwords internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases database branches branch passwords internal server error response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody get organizations organization databases database branches branch passwords o k body
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations organization databases database branches branch passwords o k body
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches branch passwords o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0 get organizations organization databases database branches branch passwords o k body data items0
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0 struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// actor
	Actor *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor `json:"actor,omitempty"`

	// When the password was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database branch
	// Required: true
	DatabaseBranch *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch `json:"database_branch"`

	// When the password was deleted
	DeletedAt string `json:"deleted_at,omitempty"`

	// When the password will expire
	ExpiresAt string `json:"expires_at,omitempty"`

	// The ID for the password
	// Required: true
	ID *string `json:"id"`

	// The display name for the password
	// Required: true
	Name *string `json:"name"`

	// region
	Region *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region `json:"region,omitempty"`

	// Whether or not the password can be renewed
	// Required: true
	Renewable *bool `json:"renewable"`

	// Whether or not the password is for a read replica
	// Required: true
	Replica *bool `json:"replica"`

	// The role for the password
	// Required: true
	Role *string `json:"role"`

	// Time to live (in seconds) for the password. The password will be invalid when TTL has passed
	// Required: true
	TTLSeconds *float64 `json:"ttl_seconds"`

	// The username for the password
	Username string `json:"username,omitempty"`
}

// Validate validates this get organizations organization databases database branches branch passwords o k body data items0
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabaseBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRenewable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTLSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateDatabaseBranch(formats strfmt.Registry) error {

	if err := validate.Required("database_branch", "body", o.DatabaseBranch); err != nil {
		return err
	}

	if o.DatabaseBranch != nil {
		if err := o.DatabaseBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateRenewable(formats strfmt.Registry) error {

	if err := validate.Required("renewable", "body", o.Renewable); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateReplica(formats strfmt.Registry) error {

	if err := validate.Required("replica", "body", o.Replica); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) validateTTLSeconds(formats strfmt.Registry) error {

	if err := validate.Required("ttl_seconds", "body", o.TTLSeconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches branch passwords o k body data items0 based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDatabaseBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) contextValidateDatabaseBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.DatabaseBranch != nil {

		if err := o.DatabaseBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor get organizations organization databases database branches branch passwords o k body data items0 actor
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this get organizations organization databases database branches branch passwords o k body data items0 actor
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch passwords o k body data items0 actor based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Actor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch get organizations organization databases database branches branch passwords o k body data items0 database branch
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// The ID for the database branch
	// Required: true
	ID *string `json:"id"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name for the database branch
	// Required: true
	Name *string `json:"name"`

	// Whether or not the database branch is a production database branch
	// Required: true
	Production *bool `json:"production"`
}

// Validate validates this get organizations organization databases database branches branch passwords o k body data items0 database branch
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("database_branch"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("database_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("database_branch"+"."+"mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("database_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("database_branch"+"."+"production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch passwords o k body data items0 database branch based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0DatabaseBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region get organizations organization databases database branches branch passwords o k body data items0 region
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this get organizations organization databases database branches branch passwords o k body data items0 region
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateID(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch passwords o k body data items0 region based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsOKBodyDataItems0Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
