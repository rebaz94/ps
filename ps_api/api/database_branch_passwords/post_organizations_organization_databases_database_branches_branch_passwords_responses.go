// Code generated by go-swagger; DO NOT EDIT.

package database_branch_passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader is a Reader for the PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswords structure.
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords] post_organizations_organization_databases_database_branches_branch_passwords", response, response.Code())
	}
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated describes a response with status code 201, with default header values.

Creates a password
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated struct {
	Payload *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords created response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords created response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords created response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords created response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords created response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post organizations organization databases database branches branch passwords created response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) Code() int {
	return 201
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) GetPayload() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody {
	return o.Payload
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords unauthorized response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords unauthorized response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords unauthorized response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords unauthorized response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords unauthorized response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post organizations organization databases database branches branch passwords unauthorized response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) Code() int {
	return 401
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords forbidden response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords forbidden response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords forbidden response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords forbidden response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords forbidden response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post organizations organization databases database branches branch passwords forbidden response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) Code() int {
	return 403
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords not found response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords not found response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords not found response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords not found response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords not found response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post organizations organization databases database branches branch passwords not found response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) Code() int {
	return 404
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords unprocessable entity response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords unprocessable entity response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords unprocessable entity response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords unprocessable entity response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches branch passwords unprocessable entity response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post organizations organization databases database branches branch passwords unprocessable entity response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) Code() int {
	return 422
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity ", 422)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity ", 422)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError() *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError struct {
}

// IsSuccess returns true when this post organizations organization databases database branches branch passwords internal server error response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches branch passwords internal server error response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches branch passwords internal server error response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches branch passwords internal server error response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post organizations organization databases database branches branch passwords internal server error response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post organizations organization databases database branches branch passwords internal server error response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) Code() int {
	return 500
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches/{branch}/passwords][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody post organizations organization databases database branches branch passwords body
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody struct {

	// Optional name of the password
	Name string `json:"name,omitempty"`

	// Whether the password is for a read replica
	Replica bool `json:"replica,omitempty"`

	// The database role of the password (i.e. admin)
	// Enum: [reader writer admin readwriter]
	Role string `json:"role,omitempty"`

	// Time to live (in seconds) for the password. The password will be invalid when TTL has passed
	TTL float64 `json:"ttl,omitempty"`
}

// Validate validates this post organizations organization databases database branches branch passwords body
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reader","writer","admin","readwriter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyTypeRolePropEnum = append(postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyTypeRolePropEnum, v)
	}
}

const (

	// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleReader captures enum value "reader"
	PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleReader string = "reader"

	// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleWriter captures enum value "writer"
	PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleWriter string = "writer"

	// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleAdmin captures enum value "admin"
	PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleAdmin string = "admin"

	// PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleReadwriter captures enum value "readwriter"
	PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyRoleReadwriter string = "readwriter"
)

// prop value enum
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords body based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody post organizations organization databases database branches branch passwords created body
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// actor
	Actor *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor `json:"actor,omitempty"`

	// When the password was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database branch
	// Required: true
	DatabaseBranch *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch `json:"database_branch"`

	// When the password was deleted
	DeletedAt string `json:"deleted_at,omitempty"`

	// When the password will expire
	ExpiresAt string `json:"expires_at,omitempty"`

	// The ID for the password
	// Required: true
	ID *string `json:"id"`

	// The display name for the password
	// Required: true
	Name *string `json:"name"`

	// The plain text password
	// Required: true
	PlainText *string `json:"plain_text"`

	// region
	Region *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion `json:"region,omitempty"`

	// Whether or not the password can be renewed
	// Required: true
	Renewable *bool `json:"renewable"`

	// Whether or not the password is for a read replica
	// Required: true
	Replica *bool `json:"replica"`

	// The role for the password
	// Required: true
	Role *string `json:"role"`

	// Time to live (in seconds) for the password. The password will be invalid when TTL has passed
	// Required: true
	TTLSeconds *float64 `json:"ttl_seconds"`

	// The username for the password
	Username string `json:"username,omitempty"`
}

// Validate validates this post organizations organization databases database branches branch passwords created body
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabaseBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlainText(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRenewable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTLSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateDatabaseBranch(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch", "body", o.DatabaseBranch); err != nil {
		return err
	}

	if o.DatabaseBranch != nil {
		if err := o.DatabaseBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validatePlainText(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"plain_text", "body", o.PlainText); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateRenewable(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"renewable", "body", o.Renewable); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateReplica(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"replica", "body", o.Replica); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) validateTTLSeconds(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"ttl_seconds", "body", o.TTLSeconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post organizations organization databases database branches branch passwords created body based on the context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDatabaseBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) contextValidateDatabaseBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.DatabaseBranch != nil {

		if err := o.DatabaseBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "database_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "database_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor post organizations organization databases database branches branch passwords created body actor
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this post organizations organization databases database branches branch passwords created body actor
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords created body actor based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch post organizations organization databases database branches branch passwords created body database branch
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch struct {

	// The host URL for the password
	// Required: true
	AccessHostURL *string `json:"access_host_url"`

	// The ID for the database branch
	// Required: true
	ID *string `json:"id"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name for the database branch
	// Required: true
	Name *string `json:"name"`

	// Whether or not the database branch is a production database branch
	// Required: true
	Production *bool `json:"production"`
}

// Validate validates this post organizations organization databases database branches branch passwords created body database branch
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessHostURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) validateAccessHostURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch"+"."+"access_host_url", "body", o.AccessHostURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch"+"."+"mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"database_branch"+"."+"production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords created body database branch based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyDatabaseBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion post organizations organization databases database branches branch passwords created body region
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this post organizations organization databases database branches branch passwords created body region
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreated"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches branch passwords created body region based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBranchPasswordsCreatedBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
