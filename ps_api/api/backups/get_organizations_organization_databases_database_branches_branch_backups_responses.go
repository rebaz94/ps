// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsReader is a Reader for the GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackups structure.
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups] get_organizations_organization_databases_database_branches_branch_backups", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK describes a response with status code 200, with default header values.

Returns database branch backups
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK struct {
	Payload *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch backups o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases database branches branch backups o k response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) GetPayload() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases database branches branch backups unauthorized response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases database branches branch backups forbidden response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases database branches branch backups not found response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch backups internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases database branches branch backups internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases database branches branch backups internal server error response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody get organizations organization databases database branches branch backups o k body
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations organization databases database branches branch backups o k body
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches branch backups o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0 get organizations organization databases database branches branch backups o k body data items0
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0 struct {

	// actor
	Actor *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor `json:"actor,omitempty"`

	// backup policy
	BackupPolicy *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy `json:"backup_policy,omitempty"`

	// When the backup was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The estimated storage cost of the backup
	// Required: true
	EstimatedStorageCost *float64 `json:"estimated_storage_cost"`

	// The ID of the backup
	// Required: true
	ID *string `json:"id"`

	// The name of the backup
	// Required: true
	Name *string `json:"name"`

	// Whether or not the backup policy is required
	// Required: true
	Required *bool `json:"required"`

	// Branches that have been restored with this backup
	RestoredBranches []string `json:"restored_branches"`

	// schema snapshot
	// Required: true
	SchemaSnapshot *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot `json:"schema_snapshot"`

	// The size of the backup
	// Required: true
	Size *float64 `json:"size"`

	// The current state of the backup
	// Required: true
	// Enum: [pending running success failed canceled ignored]
	State *string `json:"state"`

	// When the backup was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches branch backups o k body data items0
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBackupPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEstimatedStorageCost(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchemaSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateBackupPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.BackupPolicy) { // not required
		return nil
	}

	if o.BackupPolicy != nil {
		if err := o.BackupPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_policy")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateEstimatedStorageCost(formats strfmt.Registry) error {

	if err := validate.Required("estimated_storage_cost", "body", o.EstimatedStorageCost); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", o.Required); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateSchemaSnapshot(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot", "body", o.SchemaSnapshot); err != nil {
		return err
	}

	if o.SchemaSnapshot != nil {
		if err := o.SchemaSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_snapshot")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","success","failed","canceled","ignored"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0TypeStatePropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0TypeStatePropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StatePending captures enum value "pending"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StatePending string = "pending"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateRunning captures enum value "running"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateRunning string = "running"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateSuccess captures enum value "success"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateSuccess string = "success"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateFailed captures enum value "failed"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateFailed string = "failed"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateCanceled captures enum value "canceled"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateCanceled string = "canceled"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateIgnored captures enum value "ignored"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0StateIgnored string = "ignored"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", o.State); err != nil {
		return err
	}

	// value enum
	if err := o.validateStateEnum("state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches branch backups o k body data items0 based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBackupPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchemaSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) contextValidateBackupPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.BackupPolicy != nil {

		if swag.IsZero(o.BackupPolicy) { // not required
			return nil
		}

		if err := o.BackupPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_policy")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) contextValidateSchemaSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if o.SchemaSnapshot != nil {

		if err := o.SchemaSnapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_snapshot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor get organizations organization databases database branches branch backups o k body data items0 actor
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this get organizations organization databases database branches branch backups o k body data items0 actor
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups o k body data items0 actor based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0Actor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy get organizations organization databases database branches branch backups o k body data items0 backup policy
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy struct {

	// When the backup policy was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The unit for the frequency of the backup policy
	// Required: true
	FrequencyUnit *string `json:"frequency_unit"`

	// A number value for the frequency of the backup policy
	// Required: true
	FrequencyValue *float64 `json:"frequency_value"`

	// The ID of the backup policy
	// Required: true
	ID *string `json:"id"`

	// When the backup was last run
	// Required: true
	LastRanAt *string `json:"last_ran_at"`

	// The name of the backup policy
	// Required: true
	Name *string `json:"name"`

	// When the backup will next run
	// Required: true
	NextRunAt *string `json:"next_run_at"`

	// The unit for the retention period of the backup policy
	// Required: true
	RetentionUnit *string `json:"retention_unit"`

	// A number value for the retention period of the backup policy
	// Required: true
	RetentionValue *float64 `json:"retention_value"`

	// Day of the week that the backup is scheduled
	// Required: true
	// Enum: [0..6]
	ScheduleDay *string `json:"schedule_day"`

	// Week of the month that the backup is scheduled
	// Required: true
	// Enum: [0..3]
	ScheduleWeek *string `json:"schedule_week"`

	// Whether the backup policy is for a production or development database, or for a database branch
	// Required: true
	// Enum: [production development branch]
	Target *string `json:"target"`

	// When the backup policy was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches branch backups o k body data items0 backup policy
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFrequencyUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFrequencyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastRanAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetentionUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetentionValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduleDay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduleWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateFrequencyUnit(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"frequency_unit", "body", o.FrequencyUnit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateFrequencyValue(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"frequency_value", "body", o.FrequencyValue); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateLastRanAt(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"last_ran_at", "body", o.LastRanAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateNextRunAt(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"next_run_at", "body", o.NextRunAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateRetentionUnit(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"retention_unit", "body", o.RetentionUnit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateRetentionValue(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"retention_value", "body", o.RetentionValue); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0..6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleDayPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleDayPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyScheduleDayNr0DotDot6 captures enum value "0..6"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyScheduleDayNr0DotDot6 string = "0..6"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateScheduleDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateScheduleDay(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"schedule_day", "body", o.ScheduleDay); err != nil {
		return err
	}

	// value enum
	if err := o.validateScheduleDayEnum("backup_policy"+"."+"schedule_day", "body", *o.ScheduleDay); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0..3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleWeekPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleWeekPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyScheduleWeekNr0DotDot3 captures enum value "0..3"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyScheduleWeekNr0DotDot3 string = "0..3"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateScheduleWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeScheduleWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateScheduleWeek(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"schedule_week", "body", o.ScheduleWeek); err != nil {
		return err
	}

	// value enum
	if err := o.validateScheduleWeekEnum("backup_policy"+"."+"schedule_week", "body", *o.ScheduleWeek); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["production","development","branch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeTargetPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeTargetPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetProduction captures enum value "production"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetProduction string = "production"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetDevelopment captures enum value "development"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetDevelopment string = "development"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetBranch captures enum value "branch"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTargetBranch string = "branch"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicyTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"target", "body", o.Target); err != nil {
		return err
	}

	// value enum
	if err := o.validateTargetEnum("backup_policy"+"."+"target", "body", *o.Target); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("backup_policy"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups o k body data items0 backup policy based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0BackupPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot get organizations organization databases database branches branch backups o k body data items0 schema snapshot
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot struct {

	// When the schema snapshot was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The ID of the schema snapshot
	// Required: true
	ID *string `json:"id"`

	// The name of the schema snapshot
	// Required: true
	Name *string `json:"name"`

	// When the schema snapshot was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// The URL to the schema snapshot in the PlanetScale app
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get organizations organization databases database branches branch backups o k body data items0 schema snapshot
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("schema_snapshot"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups o k body data items0 schema snapshot based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsOKBodyDataItems0SchemaSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
