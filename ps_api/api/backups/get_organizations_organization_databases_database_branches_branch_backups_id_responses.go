// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDReader is a Reader for the GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsID structure.
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}] get_organizations_organization_databases_database_branches_branch_backups_id", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK describes a response with status code 200, with default header values.

Returns a database branch backup
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK struct {
	Payload *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups Id o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups Id o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups Id o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch backups Id o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups Id o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases database branches branch backups Id o k response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) GetPayload() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups Id unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups Id unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups Id unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups Id unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups Id unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases database branches branch backups Id unauthorized response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups Id forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups Id forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups Id forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups Id forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups Id forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases database branches branch backups Id forbidden response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups Id not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups Id not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups Id not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches branch backups Id not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches branch backups Id not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases database branches branch backups Id not found response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError() *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases database branches branch backups Id internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches branch backups Id internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches branch backups Id internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches branch backups Id internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases database branches branch backups Id internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases database branches branch backups Id internal server error response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody get organizations organization databases database branches branch backups ID o k body
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody struct {

	// actor
	Actor *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor `json:"actor,omitempty"`

	// backup policy
	BackupPolicy *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy `json:"backup_policy,omitempty"`

	// When the backup was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The estimated storage cost of the backup
	// Required: true
	EstimatedStorageCost *float64 `json:"estimated_storage_cost"`

	// The ID of the backup
	// Required: true
	ID *string `json:"id"`

	// The name of the backup
	// Required: true
	Name *string `json:"name"`

	// Whether or not the backup policy is required
	// Required: true
	Required *bool `json:"required"`

	// Branches that have been restored with this backup
	RestoredBranches []string `json:"restored_branches"`

	// schema snapshot
	// Required: true
	SchemaSnapshot *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot `json:"schema_snapshot"`

	// The size of the backup
	// Required: true
	Size *float64 `json:"size"`

	// The current state of the backup
	// Required: true
	// Enum: [pending running success failed canceled ignored]
	State *string `json:"state"`

	// When the backup was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches branch backups ID o k body
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBackupPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEstimatedStorageCost(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchemaSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateBackupPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.BackupPolicy) { // not required
		return nil
	}

	if o.BackupPolicy != nil {
		if err := o.BackupPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "backup_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "backup_policy")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateEstimatedStorageCost(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"estimated_storage_cost", "body", o.EstimatedStorageCost); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"required", "body", o.Required); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateSchemaSnapshot(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot", "body", o.SchemaSnapshot); err != nil {
		return err
	}

	if o.SchemaSnapshot != nil {
		if err := o.SchemaSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "schema_snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "schema_snapshot")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","success","failed","canceled","ignored"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyTypeStatePropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyTypeStatePropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStatePending captures enum value "pending"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStatePending string = "pending"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateRunning captures enum value "running"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateRunning string = "running"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateSuccess captures enum value "success"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateSuccess string = "success"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateFailed captures enum value "failed"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateFailed string = "failed"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateCanceled captures enum value "canceled"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateCanceled string = "canceled"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateIgnored captures enum value "ignored"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyStateIgnored string = "ignored"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	// value enum
	if err := o.validateStateEnum("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches branch backups ID o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBackupPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchemaSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) contextValidateBackupPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.BackupPolicy != nil {

		if swag.IsZero(o.BackupPolicy) { // not required
			return nil
		}

		if err := o.BackupPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "backup_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "backup_policy")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) contextValidateSchemaSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if o.SchemaSnapshot != nil {

		if err := o.SchemaSnapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "schema_snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK" + "." + "schema_snapshot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor get organizations organization databases database branches branch backups ID o k body actor
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this get organizations organization databases database branches branch backups ID o k body actor
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups ID o k body actor based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy get organizations organization databases database branches branch backups ID o k body backup policy
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy struct {

	// When the backup policy was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The unit for the frequency of the backup policy
	// Required: true
	FrequencyUnit *string `json:"frequency_unit"`

	// A number value for the frequency of the backup policy
	// Required: true
	FrequencyValue *float64 `json:"frequency_value"`

	// The ID of the backup policy
	// Required: true
	ID *string `json:"id"`

	// When the backup was last run
	// Required: true
	LastRanAt *string `json:"last_ran_at"`

	// The name of the backup policy
	// Required: true
	Name *string `json:"name"`

	// When the backup will next run
	// Required: true
	NextRunAt *string `json:"next_run_at"`

	// The unit for the retention period of the backup policy
	// Required: true
	RetentionUnit *string `json:"retention_unit"`

	// A number value for the retention period of the backup policy
	// Required: true
	RetentionValue *float64 `json:"retention_value"`

	// Day of the week that the backup is scheduled
	// Required: true
	// Enum: [0..6]
	ScheduleDay *string `json:"schedule_day"`

	// Week of the month that the backup is scheduled
	// Required: true
	// Enum: [0..3]
	ScheduleWeek *string `json:"schedule_week"`

	// Whether the backup policy is for a production or development database, or for a database branch
	// Required: true
	// Enum: [production development branch]
	Target *string `json:"target"`

	// When the backup policy was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches branch backups ID o k body backup policy
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFrequencyUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFrequencyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastRanAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetentionUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetentionValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduleDay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduleWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateFrequencyUnit(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"frequency_unit", "body", o.FrequencyUnit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateFrequencyValue(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"frequency_value", "body", o.FrequencyValue); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateLastRanAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"last_ran_at", "body", o.LastRanAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateNextRunAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"next_run_at", "body", o.NextRunAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateRetentionUnit(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"retention_unit", "body", o.RetentionUnit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateRetentionValue(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"retention_value", "body", o.RetentionValue); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0..6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleDayPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleDayPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyScheduleDayNr0DotDot6 captures enum value "0..6"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyScheduleDayNr0DotDot6 string = "0..6"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateScheduleDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateScheduleDay(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"schedule_day", "body", o.ScheduleDay); err != nil {
		return err
	}

	// value enum
	if err := o.validateScheduleDayEnum("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"schedule_day", "body", *o.ScheduleDay); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0..3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleWeekPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleWeekPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyScheduleWeekNr0DotDot3 captures enum value "0..3"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyScheduleWeekNr0DotDot3 string = "0..3"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateScheduleWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeScheduleWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateScheduleWeek(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"schedule_week", "body", o.ScheduleWeek); err != nil {
		return err
	}

	// value enum
	if err := o.validateScheduleWeekEnum("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"schedule_week", "body", *o.ScheduleWeek); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["production","development","branch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeTargetPropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeTargetPropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetProduction captures enum value "production"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetProduction string = "production"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetDevelopment captures enum value "development"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetDevelopment string = "development"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetBranch captures enum value "branch"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicyTargetBranch string = "branch"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOKBodyBackupPolicyTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"target", "body", o.Target); err != nil {
		return err
	}

	// value enum
	if err := o.validateTargetEnum("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"target", "body", *o.Target); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"backup_policy"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups ID o k body backup policy based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodyBackupPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot get organizations organization databases database branches branch backups ID o k body schema snapshot
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot struct {

	// When the schema snapshot was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The ID of the schema snapshot
	// Required: true
	ID *string `json:"id"`

	// The name of the schema snapshot
	// Required: true
	Name *string `json:"name"`

	// When the schema snapshot was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// The URL to the schema snapshot in the PlanetScale app
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get organizations organization databases database branches branch backups ID o k body schema snapshot
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIdOK"+"."+"schema_snapshot"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches branch backups ID o k body schema snapshot based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesBranchBackupsIDOKBodySchemaSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
