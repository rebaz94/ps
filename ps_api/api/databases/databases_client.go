// Code generated by go-swagger; DO NOT EDIT.

package databases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new databases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for databases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOrganizationsOrganizationDatabasesName(params *DeleteOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationsOrganizationDatabasesNameNoContent, error)

	GetOrganizationsOrganizationDatabases(params *GetOrganizationsOrganizationDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesOK, error)

	GetOrganizationsOrganizationDatabasesName(params *GetOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameOK, error)

	GetOrganizationsOrganizationDatabasesNameReadOnlyRegions(params *GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsOK, error)

	GetOrganizationsOrganizationDatabasesNameRegions(params *GetOrganizationsOrganizationDatabasesNameRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameRegionsOK, error)

	PatchOrganizationsOrganizationDatabasesName(params *PatchOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchOrganizationsOrganizationDatabasesNameOK, error)

	PostOrganizationsOrganizationDatabases(params *PostOrganizationsOrganizationDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOrganizationsOrganizationDatabasesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DeleteOrganizationsOrganizationDatabasesName deletes a database

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`delete_database`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `delete_databases` |
| Database | `delete_database` |
*/
func (a *Client) DeleteOrganizationsOrganizationDatabasesName(params *DeleteOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationsOrganizationDatabasesNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationsOrganizationDatabasesNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_organizations_organization_databases_name",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization}/databases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationsOrganizationDatabasesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationsOrganizationDatabasesNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_organizations_organization_databases_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsOrganizationDatabases lists databases

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `read_databases` |
*/
func (a *Client) GetOrganizationsOrganizationDatabases(params *GetOrganizationsOrganizationDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsOrganizationDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_organization_databases",
		Method:             "GET",
		PathPattern:        "/organizations/{organization}/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsOrganizationDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOrganizationDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_organization_databases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsOrganizationDatabasesName gets a database

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `read_databases` |
| Database | `read_database` |
*/
func (a *Client) GetOrganizationsOrganizationDatabasesName(params *GetOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsOrganizationDatabasesNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_organization_databases_name",
		Method:             "GET",
		PathPattern:        "/organizations/{organization}/databases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsOrganizationDatabasesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOrganizationDatabasesNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_organization_databases_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsOrganizationDatabasesNameReadOnlyRegions lists read only regions

	List read-only regions for the database's default branch

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `read_branches` |
| Database | `read_branches` |
*/
func (a *Client) GetOrganizationsOrganizationDatabasesNameReadOnlyRegions(params *GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsOrganizationDatabasesNameReadOnlyRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_organization_databases_name_read-only-regions",
		Method:             "GET",
		PathPattern:        "/organizations/{organization}/databases/{name}/read-only-regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOrganizationDatabasesNameReadOnlyRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_organization_databases_name_read-only-regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOrganizationsOrganizationDatabasesNameRegions lists database regions

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `read_databases` |
| Database | `read_database` |
*/
func (a *Client) GetOrganizationsOrganizationDatabasesNameRegions(params *GetOrganizationsOrganizationDatabasesNameRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOrganizationDatabasesNameRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsOrganizationDatabasesNameRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_organizations_organization_databases_name_regions",
		Method:             "GET",
		PathPattern:        "/organizations/{organization}/databases/{name}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsOrganizationDatabasesNameRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOrganizationDatabasesNameRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_organizations_organization_databases_name_regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchOrganizationsOrganizationDatabasesName updates database settings

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`write_database`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `write_databases` |
| Database | `write_database` |
*/
func (a *Client) PatchOrganizationsOrganizationDatabasesName(params *PatchOrganizationsOrganizationDatabasesNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchOrganizationsOrganizationDatabasesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOrganizationsOrganizationDatabasesNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch_organizations_organization_databases_name",
		Method:             "PATCH",
		PathPattern:        "/organizations/{organization}/databases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOrganizationsOrganizationDatabasesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOrganizationsOrganizationDatabasesNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_organizations_organization_databases_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostOrganizationsOrganizationDatabases creates a database

### Authorization
A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:

**Service Token Accesses**

	`create_databases`

**OAuth Scopes**

	| Resource | Scopes |

| :------- | :---------- |
| Organization | `create_databases` |
*/
func (a *Client) PostOrganizationsOrganizationDatabases(params *PostOrganizationsOrganizationDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOrganizationsOrganizationDatabasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationsOrganizationDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_organizations_organization_databases",
		Method:             "POST",
		PathPattern:        "/organizations/{organization}/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrganizationsOrganizationDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOrganizationsOrganizationDatabasesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_organizations_organization_databases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
