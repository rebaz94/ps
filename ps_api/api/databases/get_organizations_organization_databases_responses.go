// Code generated by go-swagger; DO NOT EDIT.

package databases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesReader is a Reader for the GetOrganizationsOrganizationDatabases structure.
type GetOrganizationsOrganizationDatabasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases] get_organizations_organization_databases", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesOK creates a GetOrganizationsOrganizationDatabasesOK with default headers values
func NewGetOrganizationsOrganizationDatabasesOK() *GetOrganizationsOrganizationDatabasesOK {
	return &GetOrganizationsOrganizationDatabasesOK{}
}

/*
GetOrganizationsOrganizationDatabasesOK describes a response with status code 200, with default header values.

Retrieves the databases for an organization
*/
type GetOrganizationsOrganizationDatabasesOK struct {
	Payload *GetOrganizationsOrganizationDatabasesOKBody
}

// IsSuccess returns true when this get organizations organization databases o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases o k response
func (o *GetOrganizationsOrganizationDatabasesOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesOK) GetPayload() *GetOrganizationsOrganizationDatabasesOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesUnauthorized creates a GetOrganizationsOrganizationDatabasesUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesUnauthorized() *GetOrganizationsOrganizationDatabasesUnauthorized {
	return &GetOrganizationsOrganizationDatabasesUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases unauthorized response
func (o *GetOrganizationsOrganizationDatabasesUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesForbidden creates a GetOrganizationsOrganizationDatabasesForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesForbidden() *GetOrganizationsOrganizationDatabasesForbidden {
	return &GetOrganizationsOrganizationDatabasesForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases forbidden response
func (o *GetOrganizationsOrganizationDatabasesForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesNotFound creates a GetOrganizationsOrganizationDatabasesNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesNotFound() *GetOrganizationsOrganizationDatabasesNotFound {
	return &GetOrganizationsOrganizationDatabasesNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases not found response
func (o *GetOrganizationsOrganizationDatabasesNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesInternalServerError creates a GetOrganizationsOrganizationDatabasesInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesInternalServerError() *GetOrganizationsOrganizationDatabasesInternalServerError {
	return &GetOrganizationsOrganizationDatabasesInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases internal server error response
func (o *GetOrganizationsOrganizationDatabasesInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases][%d] getOrganizationsOrganizationDatabasesInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesOKBody get organizations organization databases o k body
swagger:model GetOrganizationsOrganizationDatabasesOKBody
*/
type GetOrganizationsOrganizationDatabasesOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsOrganizationDatabasesOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations organization databases o k body
func (o *GetOrganizationsOrganizationDatabasesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations organization databases o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesOKBodyDataItems0 get organizations organization databases o k body data items0
swagger:model GetOrganizationsOrganizationDatabasesOKBodyDataItems0
*/
type GetOrganizationsOrganizationDatabasesOKBodyDataItems0 struct {

	// Whether seeding branches with data is enabled for all branches
	// Required: true
	AllowDataBranching *bool `json:"allow_data_branching"`

	// If the database has reached its backup restored branch limit
	// Required: true
	AtBackupRestoreBranchesLimit *bool `json:"at_backup_restore_branches_limit"`

	// If the database has reached its development branch limit
	// Required: true
	AtDevelopmentBranchLimit *bool `json:"at_development_branch_limit"`

	// Whether to automatically manage Rails migrations during deploy requests
	AutomaticMigrations bool `json:"automatic_migrations,omitempty"`

	// The total number of database branches
	// Required: true
	BranchesCount *float64 `json:"branches_count"`

	// The URL to retrieve this database's branches via the API
	// Required: true
	BranchesURL *string `json:"branches_url"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// data import
	DataImport *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport `json:"data_import,omitempty"`

	// The default branch for the database
	// Required: true
	DefaultBranch *string `json:"default_branch"`

	// Number of read only regions in the default branch
	// Required: true
	DefaultBranchReadOnlyRegionsCount *float64 `json:"default_branch_read_only_regions_count"`

	// Number of shards in the default branch
	// Required: true
	DefaultBranchShardCount *float64 `json:"default_branch_shard_count"`

	// Number of tables in the default branch schema
	// Required: true
	DefaultBranchTableCount *float64 `json:"default_branch_table_count"`

	// The total number of database development branches
	// Required: true
	DevelopmentBranchesCount *float64 `json:"development_branches_count"`

	// The URL to see this database's branches in the web UI
	// Required: true
	HTMLURL *string `json:"html_url"`

	// The ID of the database
	// Required: true
	ID *string `json:"id"`

	// Whether raw SQL queries are collected
	// Required: true
	InsightsRawQueries *bool `json:"insights_raw_queries"`

	// The total number of ongoing issues within a database
	// Required: true
	IssuesCount *float64 `json:"issues_count"`

	// Framework used for applying migrations
	MigrationFramework string `json:"migration_framework,omitempty"`

	// Table name to use for copying schema migration data
	MigrationTableName string `json:"migration_table_name,omitempty"`

	// If the database requires multiple admins for deletion
	// Required: true
	MultipleAdminsRequiredForDeletion *bool `json:"multiple_admins_required_for_deletion"`

	// Name of the database
	// Required: true
	Name *string `json:"name"`

	// The database plan
	// Required: true
	Plan *string `json:"plan"`

	// Whether web console is enabled for production branches
	// Required: true
	ProductionBranchWebConsole *bool `json:"production_branch_web_console"`

	// The total number of database production branches
	// Required: true
	ProductionBranchesCount *float64 `json:"production_branches_count"`

	// If the database is ready to be used
	// Required: true
	Ready *bool `json:"ready"`

	// region
	// Required: true
	Region *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region `json:"region"`

	// Whether an approval is required to deploy schema changes to this database
	// Required: true
	RequireApprovalForDeploy *bool `json:"require_approval_for_deploy"`

	// Whether to restrict branch creation to one region
	// Required: true
	RestrictBranchRegion *bool `json:"restrict_branch_region"`

	// When the default branch schema was last changed.
	SchemaLastUpdatedAt string `json:"schema_last_updated_at,omitempty"`

	// If the database is sharded
	// Required: true
	Sharded *bool `json:"sharded"`

	// State of the database
	// Required: true
	State *string `json:"state"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// The URL to the database API endpoint
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get organizations organization databases o k body data items0
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowDataBranching(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtBackupRestoreBranchesLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtDevelopmentBranchLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDataImport(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchReadOnlyRegionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchShardCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchTableCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevelopmentBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInsightsRawQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMultipleAdminsRequiredForDeletion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchWebConsole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequireApprovalForDeploy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestrictBranchRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSharded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateAllowDataBranching(formats strfmt.Registry) error {

	if err := validate.Required("allow_data_branching", "body", o.AllowDataBranching); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateAtBackupRestoreBranchesLimit(formats strfmt.Registry) error {

	if err := validate.Required("at_backup_restore_branches_limit", "body", o.AtBackupRestoreBranchesLimit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateAtDevelopmentBranchLimit(formats strfmt.Registry) error {

	if err := validate.Required("at_development_branch_limit", "body", o.AtDevelopmentBranchLimit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("branches_count", "body", o.BranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateBranchesURL(formats strfmt.Registry) error {

	if err := validate.Required("branches_url", "body", o.BranchesURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDataImport(formats strfmt.Registry) error {
	if swag.IsZero(o.DataImport) { // not required
		return nil
	}

	if o.DataImport != nil {
		if err := o.DataImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_import")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDefaultBranch(formats strfmt.Registry) error {

	if err := validate.Required("default_branch", "body", o.DefaultBranch); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDefaultBranchReadOnlyRegionsCount(formats strfmt.Registry) error {

	if err := validate.Required("default_branch_read_only_regions_count", "body", o.DefaultBranchReadOnlyRegionsCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDefaultBranchShardCount(formats strfmt.Registry) error {

	if err := validate.Required("default_branch_shard_count", "body", o.DefaultBranchShardCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDefaultBranchTableCount(formats strfmt.Registry) error {

	if err := validate.Required("default_branch_table_count", "body", o.DefaultBranchTableCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateDevelopmentBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("development_branches_count", "body", o.DevelopmentBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateInsightsRawQueries(formats strfmt.Registry) error {

	if err := validate.Required("insights_raw_queries", "body", o.InsightsRawQueries); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateIssuesCount(formats strfmt.Registry) error {

	if err := validate.Required("issues_count", "body", o.IssuesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateMultipleAdminsRequiredForDeletion(formats strfmt.Registry) error {

	if err := validate.Required("multiple_admins_required_for_deletion", "body", o.MultipleAdminsRequiredForDeletion); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("plan", "body", o.Plan); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateProductionBranchWebConsole(formats strfmt.Registry) error {

	if err := validate.Required("production_branch_web_console", "body", o.ProductionBranchWebConsole); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateProductionBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("production_branches_count", "body", o.ProductionBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("ready", "body", o.Ready); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", o.Region); err != nil {
		return err
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateRequireApprovalForDeploy(formats strfmt.Registry) error {

	if err := validate.Required("require_approval_for_deploy", "body", o.RequireApprovalForDeploy); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateRestrictBranchRegion(formats strfmt.Registry) error {

	if err := validate.Required("restrict_branch_region", "body", o.RestrictBranchRegion); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateSharded(formats strfmt.Registry) error {

	if err := validate.Required("sharded", "body", o.Sharded); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases o k body data items0 based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) contextValidateDataImport(ctx context.Context, formats strfmt.Registry) error {

	if o.DataImport != nil {

		if swag.IsZero(o.DataImport) { // not required
			return nil
		}

		if err := o.DataImport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_import")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport get organizations organization databases o k body data items0 data import
swagger:model GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport
*/
type GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport struct {

	// data source
	// Required: true
	DataSource *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource `json:"data_source"`

	// finished at
	// Required: true
	FinishedAt *string `json:"finished_at"`

	// import check errors
	// Required: true
	ImportCheckErrors *string `json:"import_check_errors"`

	// started at
	// Required: true
	StartedAt *string `json:"started_at"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this get organizations organization databases o k body data items0 data import
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImportCheckErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) validateDataSource(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"data_source", "body", o.DataSource); err != nil {
		return err
	}

	if o.DataSource != nil {
		if err := o.DataSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"finished_at", "body", o.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) validateImportCheckErrors(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"import_check_errors", "body", o.ImportCheckErrors); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"started_at", "body", o.StartedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) validateState(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases o k body data items0 data import based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) contextValidateDataSource(ctx context.Context, formats strfmt.Registry) error {

	if o.DataSource != nil {

		if err := o.DataSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource get organizations organization databases o k body data items0 data import data source
swagger:model GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource
*/
type GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource struct {

	// database
	// Required: true
	Database *string `json:"database"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// port
	// Required: true
	Port *string `json:"port"`
}

// Validate validates this get organizations organization databases o k body data items0 data import data source
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"data_source"+"."+"database", "body", o.Database); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"data_source"+"."+"hostname", "body", o.Hostname); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("data_import"+"."+"data_source"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases o k body data items0 data import data source based on context it is used
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesOKBodyDataItems0DataImportDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region get organizations organization databases o k body data items0 region
swagger:model GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region
*/
type GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this get organizations organization databases o k body data items0 region
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateID(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases o k body data items0 region based on context it is used
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesOKBodyDataItems0Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
