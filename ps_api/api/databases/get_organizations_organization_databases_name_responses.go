// Code generated by go-swagger; DO NOT EDIT.

package databases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesNameReader is a Reader for the GetOrganizationsOrganizationDatabasesName structure.
type GetOrganizationsOrganizationDatabasesNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{name}] get_organizations_organization_databases_name", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesNameOK creates a GetOrganizationsOrganizationDatabasesNameOK with default headers values
func NewGetOrganizationsOrganizationDatabasesNameOK() *GetOrganizationsOrganizationDatabasesNameOK {
	return &GetOrganizationsOrganizationDatabasesNameOK{}
}

/*
GetOrganizationsOrganizationDatabasesNameOK describes a response with status code 200, with default header values.

Returns a database
*/
type GetOrganizationsOrganizationDatabasesNameOK struct {
	Payload *GetOrganizationsOrganizationDatabasesNameOKBody
}

// IsSuccess returns true when this get organizations organization databases name o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases name o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases name o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases name o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases name o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases name o k response
func (o *GetOrganizationsOrganizationDatabasesNameOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesNameOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesNameOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesNameOK) GetPayload() *GetOrganizationsOrganizationDatabasesNameOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesNameUnauthorized creates a GetOrganizationsOrganizationDatabasesNameUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesNameUnauthorized() *GetOrganizationsOrganizationDatabasesNameUnauthorized {
	return &GetOrganizationsOrganizationDatabasesNameUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesNameUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases name unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases name unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases name unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases name unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases name unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases name unauthorized response
func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesNameForbidden creates a GetOrganizationsOrganizationDatabasesNameForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesNameForbidden() *GetOrganizationsOrganizationDatabasesNameForbidden {
	return &GetOrganizationsOrganizationDatabasesNameForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesNameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesNameForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases name forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases name forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases name forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases name forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases name forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases name forbidden response
func (o *GetOrganizationsOrganizationDatabasesNameForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesNameForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesNameForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesNameNotFound creates a GetOrganizationsOrganizationDatabasesNameNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesNameNotFound() *GetOrganizationsOrganizationDatabasesNameNotFound {
	return &GetOrganizationsOrganizationDatabasesNameNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesNameNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases name not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases name not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases name not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases name not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases name not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases name not found response
func (o *GetOrganizationsOrganizationDatabasesNameNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesNameNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesNameNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesNameInternalServerError creates a GetOrganizationsOrganizationDatabasesNameInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesNameInternalServerError() *GetOrganizationsOrganizationDatabasesNameInternalServerError {
	return &GetOrganizationsOrganizationDatabasesNameInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesNameInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases name internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases name internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases name internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases name internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases name internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases name internal server error response
func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{name}][%d] getOrganizationsOrganizationDatabasesNameInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesNameOKBody get organizations organization databases name o k body
swagger:model GetOrganizationsOrganizationDatabasesNameOKBody
*/
type GetOrganizationsOrganizationDatabasesNameOKBody struct {

	// Whether seeding branches with data is enabled for all branches
	// Required: true
	AllowDataBranching *bool `json:"allow_data_branching"`

	// If the database has reached its backup restored branch limit
	// Required: true
	AtBackupRestoreBranchesLimit *bool `json:"at_backup_restore_branches_limit"`

	// If the database has reached its development branch limit
	// Required: true
	AtDevelopmentBranchLimit *bool `json:"at_development_branch_limit"`

	// Whether to automatically manage Rails migrations during deploy requests
	AutomaticMigrations bool `json:"automatic_migrations,omitempty"`

	// The total number of database branches
	// Required: true
	BranchesCount *float64 `json:"branches_count"`

	// The URL to retrieve this database's branches via the API
	// Required: true
	BranchesURL *string `json:"branches_url"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// data import
	DataImport *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport `json:"data_import,omitempty"`

	// The default branch for the database
	// Required: true
	DefaultBranch *string `json:"default_branch"`

	// Number of read only regions in the default branch
	// Required: true
	DefaultBranchReadOnlyRegionsCount *float64 `json:"default_branch_read_only_regions_count"`

	// Number of shards in the default branch
	// Required: true
	DefaultBranchShardCount *float64 `json:"default_branch_shard_count"`

	// Number of tables in the default branch schema
	// Required: true
	DefaultBranchTableCount *float64 `json:"default_branch_table_count"`

	// The total number of database development branches
	// Required: true
	DevelopmentBranchesCount *float64 `json:"development_branches_count"`

	// The URL to see this database's branches in the web UI
	// Required: true
	HTMLURL *string `json:"html_url"`

	// The ID of the database
	// Required: true
	ID *string `json:"id"`

	// Whether raw SQL queries are collected
	// Required: true
	InsightsRawQueries *bool `json:"insights_raw_queries"`

	// The total number of ongoing issues within a database
	// Required: true
	IssuesCount *float64 `json:"issues_count"`

	// Framework used for applying migrations
	MigrationFramework string `json:"migration_framework,omitempty"`

	// Table name to use for copying schema migration data
	MigrationTableName string `json:"migration_table_name,omitempty"`

	// If the database requires multiple admins for deletion
	// Required: true
	MultipleAdminsRequiredForDeletion *bool `json:"multiple_admins_required_for_deletion"`

	// Name of the database
	// Required: true
	Name *string `json:"name"`

	// The database plan
	// Required: true
	Plan *string `json:"plan"`

	// Whether web console is enabled for production branches
	// Required: true
	ProductionBranchWebConsole *bool `json:"production_branch_web_console"`

	// The total number of database production branches
	// Required: true
	ProductionBranchesCount *float64 `json:"production_branches_count"`

	// If the database is ready to be used
	// Required: true
	Ready *bool `json:"ready"`

	// region
	// Required: true
	Region *GetOrganizationsOrganizationDatabasesNameOKBodyRegion `json:"region"`

	// Whether an approval is required to deploy schema changes to this database
	// Required: true
	RequireApprovalForDeploy *bool `json:"require_approval_for_deploy"`

	// Whether to restrict branch creation to one region
	// Required: true
	RestrictBranchRegion *bool `json:"restrict_branch_region"`

	// When the default branch schema was last changed.
	SchemaLastUpdatedAt string `json:"schema_last_updated_at,omitempty"`

	// If the database is sharded
	// Required: true
	Sharded *bool `json:"sharded"`

	// State of the database
	// Required: true
	State *string `json:"state"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// The URL to the database API endpoint
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get organizations organization databases name o k body
func (o *GetOrganizationsOrganizationDatabasesNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowDataBranching(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtBackupRestoreBranchesLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtDevelopmentBranchLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDataImport(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchReadOnlyRegionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchShardCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchTableCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevelopmentBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInsightsRawQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMultipleAdminsRequiredForDeletion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchWebConsole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequireApprovalForDeploy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestrictBranchRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSharded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateAllowDataBranching(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"allow_data_branching", "body", o.AllowDataBranching); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateAtBackupRestoreBranchesLimit(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"at_backup_restore_branches_limit", "body", o.AtBackupRestoreBranchesLimit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateAtDevelopmentBranchLimit(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"at_development_branch_limit", "body", o.AtDevelopmentBranchLimit); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"branches_count", "body", o.BranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateBranchesURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"branches_url", "body", o.BranchesURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDataImport(formats strfmt.Registry) error {
	if swag.IsZero(o.DataImport) { // not required
		return nil
	}

	if o.DataImport != nil {
		if err := o.DataImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDefaultBranch(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"default_branch", "body", o.DefaultBranch); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDefaultBranchReadOnlyRegionsCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"default_branch_read_only_regions_count", "body", o.DefaultBranchReadOnlyRegionsCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDefaultBranchShardCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"default_branch_shard_count", "body", o.DefaultBranchShardCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDefaultBranchTableCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"default_branch_table_count", "body", o.DefaultBranchTableCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateDevelopmentBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"development_branches_count", "body", o.DevelopmentBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateInsightsRawQueries(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"insights_raw_queries", "body", o.InsightsRawQueries); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateIssuesCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"issues_count", "body", o.IssuesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateMultipleAdminsRequiredForDeletion(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"multiple_admins_required_for_deletion", "body", o.MultipleAdminsRequiredForDeletion); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateProductionBranchWebConsole(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"production_branch_web_console", "body", o.ProductionBranchWebConsole); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateProductionBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"production_branches_count", "body", o.ProductionBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"ready", "body", o.Ready); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region", "body", o.Region); err != nil {
		return err
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateRequireApprovalForDeploy(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"require_approval_for_deploy", "body", o.RequireApprovalForDeploy); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateRestrictBranchRegion(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"restrict_branch_region", "body", o.RestrictBranchRegion); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateSharded(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"sharded", "body", o.Sharded); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases name o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) contextValidateDataImport(ctx context.Context, formats strfmt.Registry) error {

	if o.DataImport != nil {

		if swag.IsZero(o.DataImport) { // not required
			return nil
		}

		if err := o.DataImport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesNameOKBodyDataImport get organizations organization databases name o k body data import
swagger:model GetOrganizationsOrganizationDatabasesNameOKBodyDataImport
*/
type GetOrganizationsOrganizationDatabasesNameOKBodyDataImport struct {

	// data source
	// Required: true
	DataSource *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource `json:"data_source"`

	// finished at
	// Required: true
	FinishedAt *string `json:"finished_at"`

	// import check errors
	// Required: true
	ImportCheckErrors *string `json:"import_check_errors"`

	// started at
	// Required: true
	StartedAt *string `json:"started_at"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this get organizations organization databases name o k body data import
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImportCheckErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) validateDataSource(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"data_source", "body", o.DataSource); err != nil {
		return err
	}

	if o.DataSource != nil {
		if err := o.DataSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"finished_at", "body", o.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) validateImportCheckErrors(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"import_check_errors", "body", o.ImportCheckErrors); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"started_at", "body", o.StartedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) validateState(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases name o k body data import based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) contextValidateDataSource(ctx context.Context, formats strfmt.Registry) error {

	if o.DataSource != nil {

		if err := o.DataSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationDatabasesNameOK" + "." + "data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImport) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesNameOKBodyDataImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource get organizations organization databases name o k body data import data source
swagger:model GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource
*/
type GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource struct {

	// database
	// Required: true
	Database *string `json:"database"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// port
	// Required: true
	Port *string `json:"port"`
}

// Validate validates this get organizations organization databases name o k body data import data source
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"data_source"+"."+"database", "body", o.Database); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"data_source"+"."+"hostname", "body", o.Hostname); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"data_import"+"."+"data_source"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases name o k body data import data source based on context it is used
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesNameOKBodyDataImportDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesNameOKBodyRegion get organizations organization databases name o k body region
swagger:model GetOrganizationsOrganizationDatabasesNameOKBodyRegion
*/
type GetOrganizationsOrganizationDatabasesNameOKBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this get organizations organization databases name o k body region
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesNameOK"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases name o k body region based on context it is used
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesNameOKBodyRegion) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesNameOKBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
