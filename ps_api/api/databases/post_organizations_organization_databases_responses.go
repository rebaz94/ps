// Code generated by go-swagger; DO NOT EDIT.

package databases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOrganizationsOrganizationDatabasesReader is a Reader for the PostOrganizationsOrganizationDatabases structure.
type PostOrganizationsOrganizationDatabasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrganizationsOrganizationDatabasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostOrganizationsOrganizationDatabasesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostOrganizationsOrganizationDatabasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOrganizationsOrganizationDatabasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOrganizationsOrganizationDatabasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOrganizationsOrganizationDatabasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization}/databases] post_organizations_organization_databases", response, response.Code())
	}
}

// NewPostOrganizationsOrganizationDatabasesCreated creates a PostOrganizationsOrganizationDatabasesCreated with default headers values
func NewPostOrganizationsOrganizationDatabasesCreated() *PostOrganizationsOrganizationDatabasesCreated {
	return &PostOrganizationsOrganizationDatabasesCreated{}
}

/*
PostOrganizationsOrganizationDatabasesCreated describes a response with status code 201, with default header values.

Returns the created database
*/
type PostOrganizationsOrganizationDatabasesCreated struct {
	Payload *PostOrganizationsOrganizationDatabasesCreatedBody
}

// IsSuccess returns true when this post organizations organization databases created response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post organizations organization databases created response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases created response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases created response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases created response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post organizations organization databases created response
func (o *PostOrganizationsOrganizationDatabasesCreated) Code() int {
	return 201
}

func (o *PostOrganizationsOrganizationDatabasesCreated) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesCreated) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesCreated) GetPayload() *PostOrganizationsOrganizationDatabasesCreatedBody {
	return o.Payload
}

func (o *PostOrganizationsOrganizationDatabasesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOrganizationsOrganizationDatabasesCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOrganizationsOrganizationDatabasesUnauthorized creates a PostOrganizationsOrganizationDatabasesUnauthorized with default headers values
func NewPostOrganizationsOrganizationDatabasesUnauthorized() *PostOrganizationsOrganizationDatabasesUnauthorized {
	return &PostOrganizationsOrganizationDatabasesUnauthorized{}
}

/*
PostOrganizationsOrganizationDatabasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostOrganizationsOrganizationDatabasesUnauthorized struct {
}

// IsSuccess returns true when this post organizations organization databases unauthorized response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases unauthorized response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases unauthorized response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases unauthorized response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases unauthorized response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post organizations organization databases unauthorized response
func (o *PostOrganizationsOrganizationDatabasesUnauthorized) Code() int {
	return 401
}

func (o *PostOrganizationsOrganizationDatabasesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesUnauthorized) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesForbidden creates a PostOrganizationsOrganizationDatabasesForbidden with default headers values
func NewPostOrganizationsOrganizationDatabasesForbidden() *PostOrganizationsOrganizationDatabasesForbidden {
	return &PostOrganizationsOrganizationDatabasesForbidden{}
}

/*
PostOrganizationsOrganizationDatabasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostOrganizationsOrganizationDatabasesForbidden struct {
}

// IsSuccess returns true when this post organizations organization databases forbidden response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases forbidden response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases forbidden response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases forbidden response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases forbidden response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post organizations organization databases forbidden response
func (o *PostOrganizationsOrganizationDatabasesForbidden) Code() int {
	return 403
}

func (o *PostOrganizationsOrganizationDatabasesForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesForbidden) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesNotFound creates a PostOrganizationsOrganizationDatabasesNotFound with default headers values
func NewPostOrganizationsOrganizationDatabasesNotFound() *PostOrganizationsOrganizationDatabasesNotFound {
	return &PostOrganizationsOrganizationDatabasesNotFound{}
}

/*
PostOrganizationsOrganizationDatabasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostOrganizationsOrganizationDatabasesNotFound struct {
}

// IsSuccess returns true when this post organizations organization databases not found response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases not found response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases not found response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases not found response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases not found response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post organizations organization databases not found response
func (o *PostOrganizationsOrganizationDatabasesNotFound) Code() int {
	return 404
}

func (o *PostOrganizationsOrganizationDatabasesNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesNotFound) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesInternalServerError creates a PostOrganizationsOrganizationDatabasesInternalServerError with default headers values
func NewPostOrganizationsOrganizationDatabasesInternalServerError() *PostOrganizationsOrganizationDatabasesInternalServerError {
	return &PostOrganizationsOrganizationDatabasesInternalServerError{}
}

/*
PostOrganizationsOrganizationDatabasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostOrganizationsOrganizationDatabasesInternalServerError struct {
}

// IsSuccess returns true when this post organizations organization databases internal server error response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases internal server error response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases internal server error response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases internal server error response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post organizations organization databases internal server error response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post organizations organization databases internal server error response
func (o *PostOrganizationsOrganizationDatabasesInternalServerError) Code() int {
	return 500
}

func (o *PostOrganizationsOrganizationDatabasesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesInternalServerError) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases][%d] postOrganizationsOrganizationDatabasesInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostOrganizationsOrganizationDatabasesBody post organizations organization databases body
swagger:model PostOrganizationsOrganizationDatabasesBody
*/
type PostOrganizationsOrganizationDatabasesBody struct {

	// The database cluster size. This is required for Scaler Pro databases. Options: PS_10, PS_20, PS_40, PS_80, PS_160, PS_320, PS_400, PS_640, PS_700, PS_900, PS_1280, PS_1400, PS_1800, PS_2100, PS_2560, PS_2700, PS_2800, PS_AWS_C6A_4XLARGE, PS_AWS_C6I_4XLARGE, PS_AWS_C6A_8XLARGE, PS_AWS_C6I_8XLARGE, PS_AWS_C6A_12XLARGE, PS_AWS_C6I_12XLARGE, PS_AWS_C6A_16XLARGE, PS_AWS_C6I_16XLARGE, PS_AWS_M6A_2XLARGE, PS_AWS_M6I_2XLARGE, PS_AWS_M6A_4XLARGE, PS_AWS_M6I_4XLARGE, PS_AWS_M6A_8XLARGE, PS_AWS_M6I_8XLARGE, PS_AWS_M6A_12XLARGE, PS_AWS_M6I_12XLARGE, PS_AWS_R6A_XLARGE, PS_AWS_R6I_XLARGE, PS_AWS_R6A_2XLARGE, PS_AWS_R6I_2XLARGE, PS_AWS_R6A_4XLARGE, PS_AWS_R6I_4XLARGE, PS_AWS_R6A_8XLARGE, PS_AWS_R6I_8XLARGE, PS_GCP_N2_HIGHMEM_4, PS_GCP_N2D_HIGHMEM_4.
	ClusterSize string `json:"cluster_size,omitempty"`

	// Name of the database
	// Required: true
	Name *string `json:"name"`

	// The database billing plan. Options: 'hobby', 'scaler', or 'scaler_pro'.
	Plan string `json:"plan,omitempty"`

	// The region the database will be deployed in. If left blank, defaults to the organization's default region.
	Region string `json:"region,omitempty"`
}

// Validate validates this post organizations organization databases body
func (o *PostOrganizationsOrganizationDatabasesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases body based on context it is used
func (o *PostOrganizationsOrganizationDatabasesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesCreatedBody post organizations organization databases created body
swagger:model PostOrganizationsOrganizationDatabasesCreatedBody
*/
type PostOrganizationsOrganizationDatabasesCreatedBody struct {

	// Whether seeding branches with data is enabled for all branches
	// Required: true
	AllowDataBranching *bool `json:"allow_data_branching"`

	// If the database has reached its backup restored branch limit
	// Required: true
	AtBackupRestoreBranchesLimit *bool `json:"at_backup_restore_branches_limit"`

	// If the database has reached its development branch limit
	// Required: true
	AtDevelopmentBranchLimit *bool `json:"at_development_branch_limit"`

	// Whether to automatically manage Rails migrations during deploy requests
	AutomaticMigrations bool `json:"automatic_migrations,omitempty"`

	// The total number of database branches
	// Required: true
	BranchesCount *float64 `json:"branches_count"`

	// The URL to retrieve this database's branches via the API
	// Required: true
	BranchesURL *string `json:"branches_url"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// data import
	DataImport *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport `json:"data_import,omitempty"`

	// The default branch for the database
	// Required: true
	DefaultBranch *string `json:"default_branch"`

	// Number of read only regions in the default branch
	// Required: true
	DefaultBranchReadOnlyRegionsCount *float64 `json:"default_branch_read_only_regions_count"`

	// Number of shards in the default branch
	// Required: true
	DefaultBranchShardCount *float64 `json:"default_branch_shard_count"`

	// Number of tables in the default branch schema
	// Required: true
	DefaultBranchTableCount *float64 `json:"default_branch_table_count"`

	// The total number of database development branches
	// Required: true
	DevelopmentBranchesCount *float64 `json:"development_branches_count"`

	// The URL to see this database's branches in the web UI
	// Required: true
	HTMLURL *string `json:"html_url"`

	// The ID of the database
	// Required: true
	ID *string `json:"id"`

	// Whether raw SQL queries are collected
	// Required: true
	InsightsRawQueries *bool `json:"insights_raw_queries"`

	// The total number of ongoing issues within a database
	// Required: true
	IssuesCount *float64 `json:"issues_count"`

	// Framework used for applying migrations
	MigrationFramework string `json:"migration_framework,omitempty"`

	// Table name to use for copying schema migration data
	MigrationTableName string `json:"migration_table_name,omitempty"`

	// If the database requires multiple admins for deletion
	// Required: true
	MultipleAdminsRequiredForDeletion *bool `json:"multiple_admins_required_for_deletion"`

	// Name of the database
	// Required: true
	Name *string `json:"name"`

	// The database plan
	// Required: true
	Plan *string `json:"plan"`

	// Whether web console is enabled for production branches
	// Required: true
	ProductionBranchWebConsole *bool `json:"production_branch_web_console"`

	// The total number of database production branches
	// Required: true
	ProductionBranchesCount *float64 `json:"production_branches_count"`

	// If the database is ready to be used
	// Required: true
	Ready *bool `json:"ready"`

	// region
	// Required: true
	Region *PostOrganizationsOrganizationDatabasesCreatedBodyRegion `json:"region"`

	// Whether an approval is required to deploy schema changes to this database
	// Required: true
	RequireApprovalForDeploy *bool `json:"require_approval_for_deploy"`

	// Whether to restrict branch creation to one region
	// Required: true
	RestrictBranchRegion *bool `json:"restrict_branch_region"`

	// When the default branch schema was last changed.
	SchemaLastUpdatedAt string `json:"schema_last_updated_at,omitempty"`

	// If the database is sharded
	// Required: true
	Sharded *bool `json:"sharded"`

	// State of the database
	// Required: true
	State *string `json:"state"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// The URL to the database API endpoint
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this post organizations organization databases created body
func (o *PostOrganizationsOrganizationDatabasesCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowDataBranching(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtBackupRestoreBranchesLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAtDevelopmentBranchLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranchesURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDataImport(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchReadOnlyRegionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchShardCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranchTableCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevelopmentBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInsightsRawQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMultipleAdminsRequiredForDeletion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchWebConsole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductionBranchesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequireApprovalForDeploy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestrictBranchRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSharded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateAllowDataBranching(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"allow_data_branching", "body", o.AllowDataBranching); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateAtBackupRestoreBranchesLimit(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"at_backup_restore_branches_limit", "body", o.AtBackupRestoreBranchesLimit); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateAtDevelopmentBranchLimit(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"at_development_branch_limit", "body", o.AtDevelopmentBranchLimit); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"branches_count", "body", o.BranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateBranchesURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"branches_url", "body", o.BranchesURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDataImport(formats strfmt.Registry) error {
	if swag.IsZero(o.DataImport) { // not required
		return nil
	}

	if o.DataImport != nil {
		if err := o.DataImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDefaultBranch(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"default_branch", "body", o.DefaultBranch); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDefaultBranchReadOnlyRegionsCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"default_branch_read_only_regions_count", "body", o.DefaultBranchReadOnlyRegionsCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDefaultBranchShardCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"default_branch_shard_count", "body", o.DefaultBranchShardCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDefaultBranchTableCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"default_branch_table_count", "body", o.DefaultBranchTableCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateDevelopmentBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"development_branches_count", "body", o.DevelopmentBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateInsightsRawQueries(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"insights_raw_queries", "body", o.InsightsRawQueries); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateIssuesCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"issues_count", "body", o.IssuesCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateMultipleAdminsRequiredForDeletion(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"multiple_admins_required_for_deletion", "body", o.MultipleAdminsRequiredForDeletion); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateProductionBranchWebConsole(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"production_branch_web_console", "body", o.ProductionBranchWebConsole); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateProductionBranchesCount(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"production_branches_count", "body", o.ProductionBranchesCount); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"ready", "body", o.Ready); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region", "body", o.Region); err != nil {
		return err
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateRequireApprovalForDeploy(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"require_approval_for_deploy", "body", o.RequireApprovalForDeploy); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateRestrictBranchRegion(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"restrict_branch_region", "body", o.RestrictBranchRegion); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateSharded(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"sharded", "body", o.Sharded); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post organizations organization databases created body based on the context it is used
func (o *PostOrganizationsOrganizationDatabasesCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) contextValidateDataImport(ctx context.Context, formats strfmt.Registry) error {

	if o.DataImport != nil {

		if swag.IsZero(o.DataImport) { // not required
			return nil
		}

		if err := o.DataImport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesCreatedBodyDataImport post organizations organization databases created body data import
swagger:model PostOrganizationsOrganizationDatabasesCreatedBodyDataImport
*/
type PostOrganizationsOrganizationDatabasesCreatedBodyDataImport struct {

	// data source
	// Required: true
	DataSource *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource `json:"data_source"`

	// finished at
	// Required: true
	FinishedAt *string `json:"finished_at"`

	// import check errors
	// Required: true
	ImportCheckErrors *string `json:"import_check_errors"`

	// started at
	// Required: true
	StartedAt *string `json:"started_at"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this post organizations organization databases created body data import
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImportCheckErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) validateDataSource(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"data_source", "body", o.DataSource); err != nil {
		return err
	}

	if o.DataSource != nil {
		if err := o.DataSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"finished_at", "body", o.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) validateImportCheckErrors(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"import_check_errors", "body", o.ImportCheckErrors); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"started_at", "body", o.StartedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) validateState(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post organizations organization databases created body data import based on the context it is used
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) contextValidateDataSource(ctx context.Context, formats strfmt.Registry) error {

	if o.DataSource != nil {

		if err := o.DataSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import" + "." + "data_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesCreated" + "." + "data_import" + "." + "data_source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImport) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesCreatedBodyDataImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource post organizations organization databases created body data import data source
swagger:model PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource
*/
type PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource struct {

	// database
	// Required: true
	Database *string `json:"database"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// port
	// Required: true
	Port *string `json:"port"`
}

// Validate validates this post organizations organization databases created body data import data source
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"data_source"+"."+"database", "body", o.Database); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"data_source"+"."+"hostname", "body", o.Hostname); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"data_import"+"."+"data_source"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases created body data import data source based on context it is used
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesCreatedBodyDataImportDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesCreatedBodyRegion post organizations organization databases created body region
swagger:model PostOrganizationsOrganizationDatabasesCreatedBodyRegion
*/
type PostOrganizationsOrganizationDatabasesCreatedBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this post organizations organization databases created body region
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesCreated"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases created body region based on context it is used
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesCreatedBodyRegion) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesCreatedBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
