// Code generated by go-swagger; DO NOT EDIT.

package database_branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesDatabaseBranchesReader is a Reader for the GetOrganizationsOrganizationDatabasesDatabaseBranches structure.
type GetOrganizationsOrganizationDatabasesDatabaseBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{database}/branches] get_organizations_organization_databases_database_branches", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesOK creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesOK with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesOK() *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesOK{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOK describes a response with status code 200, with default header values.

Returns database branches
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOK struct {
	Payload *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody
}

// IsSuccess returns true when this get organizations organization databases database branches o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases database branches o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases database branches o k response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) GetPayload() *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized() *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases database branches unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases database branches unauthorized response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden() *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases database branches forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases database branches forbidden response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases database branches not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases database branches not found response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError() *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases database branches internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases database branches internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases database branches internal server error response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody get organizations organization databases database branches o k body
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations organization databases database branches o k body
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0 get organizations organization databases database branches o k body data items0
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0 struct {

	// actor
	Actor *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor `json:"actor,omitempty"`

	// The SKU representing the branch's cluster size
	// Required: true
	ClusterRateName *string `json:"cluster_rate_name"`

	// When the branch was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Planetscale app URL for the branch
	// Required: true
	HTMLURL *string `json:"html_url"`

	// The ID of the branch
	// Required: true
	ID *string `json:"id"`

	// The ID of the backup from which the branch was restored
	InitialRestoreID string `json:"initial_restore_id,omitempty"`

	// The MySQL address for the branch
	// Required: true
	MysqlAddress *string `json:"mysql_address"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name of the branch
	// Required: true
	Name *string `json:"name"`

	// The name of the parent branch from which the branch was created
	ParentBranch string `json:"parent_branch,omitempty"`

	// Whether or not the branch is a production branch
	// Required: true
	Production *bool `json:"production"`

	// Whether or not the branch is ready to serve queries
	// Required: true
	Ready *bool `json:"ready"`

	// region
	Region *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region `json:"region,omitempty"`

	// When a user last marked a backup restore checklist as completed
	RestoreChecklistCompletedAt string `json:"restore_checklist_completed_at,omitempty"`

	// restored from branch
	RestoredFromBranch *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch `json:"restored_from_branch,omitempty"`

	// Whether or not the branch has safe migrations enabled
	// Required: true
	SafeMigrations *bool `json:"safe_migrations"`

	// When the schema for the branch was last updated
	// Required: true
	SchemaLastUpdatedAt *string `json:"schema_last_updated_at"`

	// The number of shards in the branch
	ShardCount float64 `json:"shard_count,omitempty"`

	// Whether or not the branch is sharded
	// Required: true
	Sharded *bool `json:"sharded"`

	// When the branch was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches o k body data items0
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterRateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestoredFromBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSafeMigrations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchemaLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSharded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateClusterRateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_rate_name", "body", o.ClusterRateName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateMysqlAddress(formats strfmt.Registry) error {

	if err := validate.Required("mysql_address", "body", o.MysqlAddress); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("ready", "body", o.Ready); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateRestoredFromBranch(formats strfmt.Registry) error {
	if swag.IsZero(o.RestoredFromBranch) { // not required
		return nil
	}

	if o.RestoredFromBranch != nil {
		if err := o.RestoredFromBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restored_from_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restored_from_branch")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateSafeMigrations(formats strfmt.Registry) error {

	if err := validate.Required("safe_migrations", "body", o.SafeMigrations); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateSchemaLastUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("schema_last_updated_at", "body", o.SchemaLastUpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateSharded(formats strfmt.Registry) error {

	if err := validate.Required("sharded", "body", o.Sharded); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches o k body data items0 based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestoredFromBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) contextValidateRestoredFromBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.RestoredFromBranch != nil {

		if swag.IsZero(o.RestoredFromBranch) { // not required
			return nil
		}

		if err := o.RestoredFromBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restored_from_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restored_from_branch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor get organizations organization databases database branches o k body data items0 actor
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this get organizations organization databases database branches o k body data items0 actor
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches o k body data items0 actor based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Actor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region get organizations organization databases database branches o k body data items0 region
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this get organizations organization databases database branches o k body data items0 region
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateID(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches o k body data items0 region based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch get organizations organization databases database branches o k body data items0 restored from branch
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch struct {

	// When the resource was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// When the resource was deleted, if deleted
	// Required: true
	DeletedAt *string `json:"deleted_at"`

	// The ID for the resource
	// Required: true
	ID *string `json:"id"`

	// The name for the resource
	// Required: true
	Name *string `json:"name"`

	// When the resource was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization databases database branches o k body data items0 restored from branch
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("restored_from_branch"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) validateDeletedAt(formats strfmt.Registry) error {

	if err := validate.Required("restored_from_branch"+"."+"deleted_at", "body", o.DeletedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("restored_from_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("restored_from_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("restored_from_branch"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches o k body data items0 restored from branch based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesOKBodyDataItems0RestoredFromBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
