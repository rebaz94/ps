// Code generated by go-swagger; DO NOT EDIT.

package database_branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostOrganizationsOrganizationDatabasesDatabaseBranchesReader is a Reader for the PostOrganizationsOrganizationDatabasesDatabaseBranches structure.
type PostOrganizationsOrganizationDatabasesDatabaseBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization}/databases/{database}/branches] post_organizations_organization_databases_database_branches", response, response.Code())
	}
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesCreated creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesCreated() *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated describes a response with status code 201, with default header values.

Returns the created branch
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated struct {
	Payload *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody
}

// IsSuccess returns true when this post organizations organization databases database branches created response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post organizations organization databases database branches created response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches created response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches created response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches created response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post organizations organization databases database branches created response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) Code() int {
	return 201
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesCreated  %+v", 201, o.Payload)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) GetPayload() *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody {
	return o.Payload
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized() *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized struct {
}

// IsSuccess returns true when this post organizations organization databases database branches unauthorized response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches unauthorized response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches unauthorized response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches unauthorized response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches unauthorized response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post organizations organization databases database branches unauthorized response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) Code() int {
	return 401
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized ", 401)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden() *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden struct {
}

// IsSuccess returns true when this post organizations organization databases database branches forbidden response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches forbidden response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches forbidden response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches forbidden response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches forbidden response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post organizations organization databases database branches forbidden response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) Code() int {
	return 403
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesForbidden ", 403)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound() *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound struct {
}

// IsSuccess returns true when this post organizations organization databases database branches not found response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches not found response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches not found response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post organizations organization databases database branches not found response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post organizations organization databases database branches not found response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post organizations organization databases database branches not found response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) Code() int {
	return 404
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesNotFound ", 404)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError creates a PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError with default headers values
func NewPostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError() *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError {
	return &PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError{}
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError struct {
}

// IsSuccess returns true when this post organizations organization databases database branches internal server error response has a 2xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post organizations organization databases database branches internal server error response has a 3xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post organizations organization databases database branches internal server error response has a 4xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post organizations organization databases database branches internal server error response has a 5xx status code
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post organizations organization databases database branches internal server error response a status code equal to that given
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post organizations organization databases database branches internal server error response
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) Code() int {
	return 500
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) String() string {
	return fmt.Sprintf("[POST /organizations/{organization}/databases/{database}/branches][%d] postOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError ", 500)
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesBody post organizations organization databases database branches body
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesBody
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesBody struct {

	// If provided, restores the backup's schema and data to the new branch. Must have `restore_production_branch_backup(s)` or `restore_backup(s)` access to do this.
	BackupID string `json:"backup_id,omitempty"`

	// The name of the branch
	// Required: true
	Name *string `json:"name"`

	// Parent branch
	// Required: true
	ParentBranch *string `json:"parent_branch"`
}

// Validate validates this post organizations organization databases database branches body
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParentBranch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) validateParentBranch(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"parent_branch", "body", o.ParentBranch); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches body based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody post organizations organization databases database branches created body
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody struct {

	// actor
	Actor *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor `json:"actor,omitempty"`

	// The SKU representing the branch's cluster size
	// Required: true
	ClusterRateName *string `json:"cluster_rate_name"`

	// When the branch was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Planetscale app URL for the branch
	// Required: true
	HTMLURL *string `json:"html_url"`

	// The ID of the branch
	// Required: true
	ID *string `json:"id"`

	// The ID of the backup from which the branch was restored
	InitialRestoreID string `json:"initial_restore_id,omitempty"`

	// The MySQL address for the branch
	// Required: true
	MysqlAddress *string `json:"mysql_address"`

	// The address of the MySQL provider for the branch
	// Required: true
	MysqlEdgeAddress *string `json:"mysql_edge_address"`

	// The name of the branch
	// Required: true
	Name *string `json:"name"`

	// The name of the parent branch from which the branch was created
	ParentBranch string `json:"parent_branch,omitempty"`

	// Whether or not the branch is a production branch
	// Required: true
	Production *bool `json:"production"`

	// Whether or not the branch is ready to serve queries
	// Required: true
	Ready *bool `json:"ready"`

	// region
	Region *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion `json:"region,omitempty"`

	// When a user last marked a backup restore checklist as completed
	RestoreChecklistCompletedAt string `json:"restore_checklist_completed_at,omitempty"`

	// restored from branch
	RestoredFromBranch *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch `json:"restored_from_branch,omitempty"`

	// Whether or not the branch has safe migrations enabled
	// Required: true
	SafeMigrations *bool `json:"safe_migrations"`

	// When the schema for the branch was last updated
	// Required: true
	SchemaLastUpdatedAt *string `json:"schema_last_updated_at"`

	// The number of shards in the branch
	ShardCount float64 `json:"shard_count,omitempty"`

	// Whether or not the branch is sharded
	// Required: true
	Sharded *bool `json:"sharded"`

	// When the branch was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this post organizations organization databases database branches created body
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterRateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMysqlEdgeAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestoredFromBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSafeMigrations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchemaLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSharded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateClusterRateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"cluster_rate_name", "body", o.ClusterRateName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateMysqlAddress(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"mysql_address", "body", o.MysqlAddress); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateMysqlEdgeAddress(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"mysql_edge_address", "body", o.MysqlEdgeAddress); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateProduction(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"production", "body", o.Production); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"ready", "body", o.Ready); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateRestoredFromBranch(formats strfmt.Registry) error {
	if swag.IsZero(o.RestoredFromBranch) { // not required
		return nil
	}

	if o.RestoredFromBranch != nil {
		if err := o.RestoredFromBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "restored_from_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "restored_from_branch")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateSafeMigrations(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"safe_migrations", "body", o.SafeMigrations); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateSchemaLastUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"schema_last_updated_at", "body", o.SchemaLastUpdatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateSharded(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"sharded", "body", o.Sharded); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post organizations organization databases database branches created body based on the context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestoredFromBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {

		if swag.IsZero(o.Actor) { // not required
			return nil
		}

		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "actor")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) contextValidateRestoredFromBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.RestoredFromBranch != nil {

		if swag.IsZero(o.RestoredFromBranch) { // not required
			return nil
		}

		if err := o.RestoredFromBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "restored_from_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated" + "." + "restored_from_branch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor post organizations organization databases database branches created body actor
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor struct {

	// The URL of the actor's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// The name of the actor
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the actor
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this post organizations organization databases database branches created body actor
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"actor"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"actor"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"actor"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches created body actor based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion post organizations organization databases database branches created body region
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion struct {

	// Name of the region
	// Required: true
	DisplayName *string `json:"display_name"`

	// Whether or not the region is currently active
	// Required: true
	Enabled *bool `json:"enabled"`

	// The ID of the region
	// Required: true
	ID *string `json:"id"`

	// Location of the region
	// Required: true
	Location *string `json:"location"`

	// Provider for the region (ex. AWS)
	// Required: true
	Provider *string `json:"provider"`

	// Public IP addresses for the region
	// Required: true
	PublicIPAddresses []string `json:"public_ip_addresses"`

	// The slug of the region
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this post organizations organization databases database branches created body region
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"provider", "body", o.Provider); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validatePublicIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"public_ip_addresses", "body", o.PublicIPAddresses); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"region"+"."+"slug", "body", o.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches created body region based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch post organizations organization databases database branches created body restored from branch
swagger:model PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch
*/
type PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch struct {

	// When the resource was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// When the resource was deleted, if deleted
	// Required: true
	DeletedAt *string `json:"deleted_at"`

	// The ID for the resource
	// Required: true
	ID *string `json:"id"`

	// The name for the resource
	// Required: true
	Name *string `json:"name"`

	// When the resource was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this post organizations organization databases database branches created body restored from branch
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"restored_from_branch"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) validateDeletedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"restored_from_branch"+"."+"deleted_at", "body", o.DeletedAt); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"restored_from_branch"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"restored_from_branch"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("postOrganizationsOrganizationDatabasesDatabaseBranchesCreated"+"."+"restored_from_branch"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post organizations organization databases database branches created body restored from branch based on context it is used
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch) UnmarshalBinary(b []byte) error {
	var res PostOrganizationsOrganizationDatabasesDatabaseBranchesCreatedBodyRestoredFromBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
