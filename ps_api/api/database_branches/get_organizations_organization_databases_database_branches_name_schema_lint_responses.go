// Code generated by go-swagger; DO NOT EDIT.

package database_branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintReader is a Reader for the GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLint structure.
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint] get_organizations_organization_databases_database_branches_name_schema_lint", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK describes a response with status code 200, with default header values.

Returns a list of schema errors for a branch
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK struct {
	Payload *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody
}

// IsSuccess returns true when this get organizations organization databases database branches name schema lint o k response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization databases database branches name schema lint o k response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches name schema lint o k response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches name schema lint o k response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches name schema lint o k response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization databases database branches name schema lint o k response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) GetPayload() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization databases database branches name schema lint unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches name schema lint unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches name schema lint unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches name schema lint unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches name schema lint unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization databases database branches name schema lint unauthorized response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden struct {
}

// IsSuccess returns true when this get organizations organization databases database branches name schema lint forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches name schema lint forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches name schema lint forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches name schema lint forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches name schema lint forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization databases database branches name schema lint forbidden response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden ", 403)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound struct {
}

// IsSuccess returns true when this get organizations organization databases database branches name schema lint not found response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches name schema lint not found response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches name schema lint not found response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization databases database branches name schema lint not found response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization databases database branches name schema lint not found response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization databases database branches name schema lint not found response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound ", 404)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError creates a GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError with default headers values
func NewGetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError() *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError {
	return &GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError{}
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization databases database branches name schema lint internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization databases database branches name schema lint internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization databases database branches name schema lint internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization databases database branches name schema lint internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization databases database branches name schema lint internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization databases database branches name schema lint internal server error response
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/databases/{database}/branches/{name}/schema/lint][%d] getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody get organizations organization databases database branches name schema lint o k body
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody struct {

	// data
	// Required: true
	Data []*GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0 `json:"data"`
}

// Validate validates this get organizations organization databases database branches name schema lint o k body
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations organization databases database branches name schema lint o k body based on the context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0 get organizations organization databases database branches name schema lint o k body data items0
swagger:model GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0
*/
type GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0 struct {

	// A list of invalid auto-incremented columns
	// Required: true
	AutoIncrementColumnNames []string `json:"auto_increment_column_names"`

	// The charset of the schema
	// Required: true
	CharsetName *string `json:"charset_name"`

	// The name of the invalid check constraint
	// Required: true
	CheckConstraintName *string `json:"check_constraint_name"`

	// The column in a table relevant to the error
	// Required: true
	ColumnName *string `json:"column_name"`

	// A link to the documentation related to the error
	// Required: true
	DocsURL *string `json:"docs_url"`

	// The engine of the schema
	// Required: true
	EngineName *string `json:"engine_name"`

	// The name of the invalid enum value
	// Required: true
	EnumValue *string `json:"enum_value"`

	// A description for the error that occurred
	// Required: true
	ErrorDescription *string `json:"error_description"`

	// A list of invalid foreign key columns in a table
	// Required: true
	ForeignKeyColumnNames []string `json:"foreign_key_column_names"`

	// The path for an invalid JSON column
	// Required: true
	JSONPath *string `json:"json_path"`

	// The keyspace of the schema with the error
	// Required: true
	KeyspaceName *string `json:"keyspace_name"`

	// Code representing
	// Required: true
	LintError *string `json:"lint_error"`

	// The name of the invalid partition in the schema
	// Required: true
	PartitionName *string `json:"partition_name"`

	// The name of the invalid partitioning type
	// Required: true
	PartitioningType *string `json:"partitioning_type"`

	// The subject for the errors
	// Required: true
	// Enum: [table vschema routing_rules]
	SubjectType *string `json:"subject_type"`

	// The table with the error
	// Required: true
	TableName *string `json:"table_name"`

	// The name of the vindex for the schema
	// Required: true
	VindexName *string `json:"vindex_name"`
}

// Validate validates this get organizations organization databases database branches name schema lint o k body data items0
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAutoIncrementColumnNames(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCharsetName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCheckConstraintName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateColumnName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDocsURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEngineName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnumValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateForeignKeyColumnNames(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateJSONPath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyspaceName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLintError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartitionName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartitioningType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTableName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVindexName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateAutoIncrementColumnNames(formats strfmt.Registry) error {

	if err := validate.Required("auto_increment_column_names", "body", o.AutoIncrementColumnNames); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateCharsetName(formats strfmt.Registry) error {

	if err := validate.Required("charset_name", "body", o.CharsetName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateCheckConstraintName(formats strfmt.Registry) error {

	if err := validate.Required("check_constraint_name", "body", o.CheckConstraintName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateColumnName(formats strfmt.Registry) error {

	if err := validate.Required("column_name", "body", o.ColumnName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateDocsURL(formats strfmt.Registry) error {

	if err := validate.Required("docs_url", "body", o.DocsURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateEngineName(formats strfmt.Registry) error {

	if err := validate.Required("engine_name", "body", o.EngineName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateEnumValue(formats strfmt.Registry) error {

	if err := validate.Required("enum_value", "body", o.EnumValue); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateErrorDescription(formats strfmt.Registry) error {

	if err := validate.Required("error_description", "body", o.ErrorDescription); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateForeignKeyColumnNames(formats strfmt.Registry) error {

	if err := validate.Required("foreign_key_column_names", "body", o.ForeignKeyColumnNames); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateJSONPath(formats strfmt.Registry) error {

	if err := validate.Required("json_path", "body", o.JSONPath); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateKeyspaceName(formats strfmt.Registry) error {

	if err := validate.Required("keyspace_name", "body", o.KeyspaceName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateLintError(formats strfmt.Registry) error {

	if err := validate.Required("lint_error", "body", o.LintError); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validatePartitionName(formats strfmt.Registry) error {

	if err := validate.Required("partition_name", "body", o.PartitionName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validatePartitioningType(formats strfmt.Registry) error {

	if err := validate.Required("partitioning_type", "body", o.PartitioningType); err != nil {
		return err
	}

	return nil
}

var getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0TypeSubjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["table","vschema","routing_rules"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0TypeSubjectTypePropEnum = append(getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0TypeSubjectTypePropEnum, v)
	}
}

const (

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeTable captures enum value "table"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeTable string = "table"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeVschema captures enum value "vschema"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeVschema string = "vschema"

	// GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeRoutingRules captures enum value "routing_rules"
	GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0SubjectTypeRoutingRules string = "routing_rules"
)

// prop value enum
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateSubjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0TypeSubjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateSubjectType(formats strfmt.Registry) error {

	if err := validate.Required("subject_type", "body", o.SubjectType); err != nil {
		return err
	}

	// value enum
	if err := o.validateSubjectTypeEnum("subject_type", "body", *o.SubjectType); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateTableName(formats strfmt.Registry) error {

	if err := validate.Required("table_name", "body", o.TableName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) validateVindexName(formats strfmt.Registry) error {

	if err := validate.Required("vindex_name", "body", o.VindexName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization databases database branches name schema lint o k body data items0 based on context it is used
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationDatabasesDatabaseBranchesNameSchemaLintOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
