// Code generated by go-swagger; DO NOT EDIT.

package o_auth_applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDReader is a Reader for the GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenID structure.
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}] get_organizations_organization_oauth-applications_application_id_tokens_token_id", response, response.Code())
	}
}

// NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK creates a GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK with default headers values
func NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK {
	return &GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK{}
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK describes a response with status code 200, with default header values.

Returns an OAuth token that was issued on behalf of the OAuth application
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK struct {
	Payload *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody
}

// IsSuccess returns true when this get organizations organization oauth applications application Id tokens token Id o k response has a 2xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations organization oauth applications application Id tokens token Id o k response has a 3xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization oauth applications application Id tokens token Id o k response has a 4xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization oauth applications application Id tokens token Id o k response has a 5xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization oauth applications application Id tokens token Id o k response a status code equal to that given
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations organization oauth applications application Id tokens token Id o k response
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) Code() int {
	return 200
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) GetPayload() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody {
	return o.Payload
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized creates a GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized with default headers values
func NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized {
	return &GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized{}
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized struct {
}

// IsSuccess returns true when this get organizations organization oauth applications application Id tokens token Id unauthorized response has a 2xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization oauth applications application Id tokens token Id unauthorized response has a 3xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization oauth applications application Id tokens token Id unauthorized response has a 4xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization oauth applications application Id tokens token Id unauthorized response has a 5xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization oauth applications application Id tokens token Id unauthorized response a status code equal to that given
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organizations organization oauth applications application Id tokens token Id unauthorized response
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdUnauthorized ", 401)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden creates a GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden with default headers values
func NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden {
	return &GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden{}
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden struct {
}

// IsSuccess returns true when this get organizations organization oauth applications application Id tokens token Id forbidden response has a 2xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization oauth applications application Id tokens token Id forbidden response has a 3xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization oauth applications application Id tokens token Id forbidden response has a 4xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization oauth applications application Id tokens token Id forbidden response has a 5xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization oauth applications application Id tokens token Id forbidden response a status code equal to that given
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organizations organization oauth applications application Id tokens token Id forbidden response
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) Code() int {
	return 403
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdForbidden ", 403)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdForbidden ", 403)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound creates a GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound with default headers values
func NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound {
	return &GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound{}
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound struct {
}

// IsSuccess returns true when this get organizations organization oauth applications application Id tokens token Id not found response has a 2xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization oauth applications application Id tokens token Id not found response has a 3xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization oauth applications application Id tokens token Id not found response has a 4xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organizations organization oauth applications application Id tokens token Id not found response has a 5xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations organization oauth applications application Id tokens token Id not found response a status code equal to that given
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organizations organization oauth applications application Id tokens token Id not found response
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) Code() int {
	return 404
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdNotFound ", 404)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdNotFound ", 404)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError creates a GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError with default headers values
func NewGetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError() *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError {
	return &GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError{}
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError struct {
}

// IsSuccess returns true when this get organizations organization oauth applications application Id tokens token Id internal server error response has a 2xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organizations organization oauth applications application Id tokens token Id internal server error response has a 3xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations organization oauth applications application Id tokens token Id internal server error response has a 4xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations organization oauth applications application Id tokens token Id internal server error response has a 5xx status code
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get organizations organization oauth applications application Id tokens token Id internal server error response a status code equal to that given
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get organizations organization oauth applications application Id tokens token Id internal server error response
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) Code() int {
	return 500
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}][%d] getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdInternalServerError ", 500)
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody get organizations organization oauth applications application ID tokens token ID o k body
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody struct {

	// The name of the actor on whose behalf the service token was created
	// Required: true
	ActorDisplayName *string `json:"actor_display_name"`

	// The ID of the actor on whose behalf the service token was created
	// Required: true
	ActorID *string `json:"actor_id"`

	// The type of the actor on whose behalf the service token was created
	// Required: true
	ActorType *string `json:"actor_type"`

	// The image source for the avatar of the service token
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// When the service token was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The display name of the service token
	// Required: true
	DisplayName *string `json:"display_name"`

	// When the service token will expire
	// Required: true
	ExpiresAt *string `json:"expires_at"`

	// The ID of the service token
	// Required: true
	ID *string `json:"id"`

	// When the service token was last used
	// Required: true
	LastUsedAt *string `json:"last_used_at"`

	// The name of the service token
	// Required: true
	Name *string `json:"name"`

	// oauth accesses by resource
	// Required: true
	OauthAccessesByResource *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource `json:"oauth_accesses_by_resource"`

	// When the service token was last updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActorDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActorType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUsedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOauthAccessesByResource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateActorDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"actor_display_name", "body", o.ActorDisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateActorID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"actor_id", "body", o.ActorID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateActorType(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"actor_type", "body", o.ActorType); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"expires_at", "body", o.ExpiresAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateLastUsedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"last_used_at", "body", o.LastUsedAt); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateOauthAccessesByResource(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource", "body", o.OauthAccessesByResource); err != nil {
		return err
	}

	if o.OauthAccessesByResource != nil {
		if err := o.OauthAccessesByResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organizations organization oauth applications application ID tokens token ID o k body based on the context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOauthAccessesByResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) contextValidateOauthAccessesByResource(ctx context.Context, formats strfmt.Registry) error {

	if o.OauthAccessesByResource != nil {

		if err := o.OauthAccessesByResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource struct {

	// branch
	// Required: true
	Branch *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch `json:"branch"`

	// database
	// Required: true
	Database *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase `json:"database"`

	// organization
	// Required: true
	Organization *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization `json:"organization"`

	// user
	// Required: true
	User *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser `json:"user"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"branch", "body", o.Branch); err != nil {
		return err
	}

	if o.Branch != nil {
		if err := o.Branch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "branch")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"database", "body", o.Database); err != nil {
		return err
	}

	if o.Database != nil {
		if err := o.Database.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "database")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) validateOrganization(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"organization", "body", o.Organization); err != nil {
		return err
	}

	if o.Organization != nil {
		if err := o.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource based on the context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDatabase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) contextValidateBranch(ctx context.Context, formats strfmt.Registry) error {

	if o.Branch != nil {

		if err := o.Branch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "branch")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) contextValidateDatabase(ctx context.Context, formats strfmt.Registry) error {

	if o.Database != nil {

		if err := o.Database.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "database")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if o.Organization != nil {

		if err := o.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {

		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK" + "." + "oauth_accesses_by_resource" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource branch
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch struct {

	// Accesses the token has on the resources
	// Required: true
	Accesses []string `json:"accesses"`

	// Branches the token has access to
	// Required: true
	Branches []string `json:"branches"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource branch
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBranches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) validateAccesses(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"branch"+"."+"accesses", "body", o.Accesses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) validateBranches(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"branch"+"."+"branches", "body", o.Branches); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource branch based on context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource database
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase struct {

	// Accesses the token has on the resources
	// Required: true
	Accesses []string `json:"accesses"`

	// Databases the token has access to
	// Required: true
	Databases []string `json:"databases"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource database
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDatabases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) validateAccesses(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"database"+"."+"accesses", "body", o.Accesses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) validateDatabases(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"database"+"."+"databases", "body", o.Databases); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource database based on context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceDatabase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource organization
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization struct {

	// Accesses the token has on the resources
	// Required: true
	Accesses []string `json:"accesses"`

	// Organizations the token has access to
	// Required: true
	Organizations []string `json:"organizations"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource organization
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) validateAccesses(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"organization"+"."+"accesses", "body", o.Accesses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) validateOrganizations(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"organization"+"."+"organizations", "body", o.Organizations); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource organization based on context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource user
swagger:model GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser
*/
type GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser struct {

	// Accesses the token has on the resources
	// Required: true
	Accesses []string `json:"accesses"`

	// Users the token has access to
	// Required: true
	Users []string `json:"users"`
}

// Validate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource user
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) validateAccesses(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"user"+"."+"accesses", "body", o.Accesses); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationsOrganizationOauthApplicationsApplicationIdTokensTokenIdOK"+"."+"oauth_accesses_by_resource"+"."+"user"+"."+"users", "body", o.Users); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations organization oauth applications application ID tokens token ID o k body oauth accesses by resource user based on context it is used
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOrganizationOauthApplicationsApplicationIDTokensTokenIDOKBodyOauthAccessesByResourceUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
